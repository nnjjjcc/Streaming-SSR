"use strict";
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHandlerFactory = void 0;
const implementation_js_1 = require("../implementation.js");
const connect_error_js_1 = require("../connect-error.js");
const code_js_1 = require("../code.js");
const index_js_1 = require("../protocol/index.js");
const content_type_js_1 = require("./content-type.js");
const headers_js_1 = require("./headers.js");
const trailer_status_js_1 = require("./trailer-status.js");
const protocolName = "grpc";
const methodPost = "POST";
/**
 * Create a factory that creates gRPC handlers.
 */
function createHandlerFactory(options) {
    const opt = (0, index_js_1.validateUniversalHandlerOptions)(options);
    function fact(spec) {
        const h = createHandler(opt, spec);
        return Object.assign(h, {
            protocolNames: [protocolName],
            allowedMethods: [methodPost],
            supportedContentType: (0, index_js_1.contentTypeMatcher)(content_type_js_1.contentTypeRegExp),
            requestPath: (0, index_js_1.createMethodUrl)("/", spec.service, spec.method),
            service: spec.service,
            method: spec.method,
        });
    }
    fact.protocolName = protocolName;
    return fact;
}
exports.createHandlerFactory = createHandlerFactory;
function createHandler(opt, spec) {
    const serialization = (0, index_js_1.createMethodSerializationLookup)(spec.method, opt.binaryOptions, opt.jsonOptions, opt);
    // eslint-disable-next-line @typescript-eslint/require-await
    return async function handle(req) {
        (0, index_js_1.assertByteStreamRequest)(req);
        const type = (0, content_type_js_1.parseContentType)(req.header.get(headers_js_1.headerContentType));
        if (type == undefined) {
            return index_js_1.uResponseUnsupportedMediaType;
        }
        if (req.method !== methodPost) {
            return index_js_1.uResponseMethodNotAllowed;
        }
        const context = (0, implementation_js_1.createHandlerContext)(spec, req.header, {
            [headers_js_1.headerContentType]: type.binary ? content_type_js_1.contentTypeProto : content_type_js_1.contentTypeJson,
        }, {
            [headers_js_1.headerGrpcStatus]: trailer_status_js_1.grpcStatusOk,
        });
        const compression = (0, index_js_1.compressionNegotiate)(opt.acceptCompression, req.header.get(headers_js_1.headerEncoding), req.header.get(headers_js_1.headerAcceptEncoding), headers_js_1.headerAcceptEncoding);
        if (compression.response) {
            context.responseHeader.set(headers_js_1.headerEncoding, compression.response.name);
        }
        const outputIt = (0, index_js_1.pipe)(req.body, (0, index_js_1.transformPrepend)(() => {
            // raise compression error to serialize it as a trailer status
            if (compression.error)
                throw compression.error;
            return undefined;
        }), (0, index_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, index_js_1.transformDecompressEnvelope)(compression.request, opt.readMaxBytes), (0, index_js_1.transformParseEnvelope)(serialization.getI(type.binary)), (0, index_js_1.transformInvokeImplementation)(spec, context), (0, index_js_1.transformSerializeEnvelope)(serialization.getO(type.binary)), (0, index_js_1.transformCompressEnvelope)(compression.response, opt.compressMinBytes), (0, index_js_1.transformJoinEnvelopes)(), (0, index_js_1.transformCatch)((e) => {
            if (e instanceof connect_error_js_1.ConnectError) {
                (0, trailer_status_js_1.setTrailerStatus)(context.responseTrailer, e);
            }
            else {
                (0, trailer_status_js_1.setTrailerStatus)(context.responseTrailer, new connect_error_js_1.ConnectError("internal error", code_js_1.Code.Internal, undefined, undefined, e));
            }
        }));
        return Object.assign(Object.assign({}, index_js_1.uResponseOk), { body: outputIt, header: context.responseHeader, trailer: context.responseTrailer });
    };
}
