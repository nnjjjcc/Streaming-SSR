"use strict";
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateResponseWithCompression = exports.validateResponse = void 0;
const http_status_js_1 = require("./http-status.js");
const content_type_js_1 = require("./content-type.js");
const connect_error_js_1 = require("../connect-error.js");
const trailer_status_js_1 = require("./trailer-status.js");
const code_js_1 = require("../code.js");
const headers_js_1 = require("./headers.js");
/**
 * Validates response status and header for the gRPC protocol.
 * Throws a ConnectError if the header contains an error status,
 * the HTTP status indicates an error, or if the content type is
 * unexpected.
 *
 * Returns an object that indicates whether a gRPC status was found
 * in the response header. In this case, clients can not expect a
 * trailer.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponse(useBinaryFormat, status, headers) {
    var _a;
    const code = (0, http_status_js_1.codeFromHttpStatus)(status);
    if (code != null) {
        throw new connect_error_js_1.ConnectError(decodeURIComponent((_a = headers.get(headers_js_1.headerGrpcMessage)) !== null && _a !== void 0 ? _a : `HTTP ${status}`), code);
    }
    const mimeType = headers.get(headers_js_1.headerContentType);
    const parsedType = (0, content_type_js_1.parseContentType)(mimeType);
    if (!parsedType || parsedType.binary != useBinaryFormat) {
        throw new connect_error_js_1.ConnectError(`unexpected response content type ${mimeType !== null && mimeType !== void 0 ? mimeType : "?"}`, code_js_1.Code.Internal);
    }
    const err = (0, trailer_status_js_1.findTrailerError)(headers);
    if (err) {
        throw err;
    }
    return { foundStatus: headers.has(headers_js_1.headerGrpcStatus) };
}
exports.validateResponse = validateResponse;
/**
 * Validates response status and header for the gRPC protocol.
 * This function is identical to validateResponse(), but also verifies
 * that a given encoding header is acceptable.
 *
 * Returns an object with the response compression, and a boolean
 * indicating whether a gRPC status was found in the response header
 * (in this case, clients can not expect a trailer).
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponseWithCompression(useBinaryFormat, acceptCompression, status, headers) {
    const { foundStatus } = validateResponse(useBinaryFormat, status, headers);
    let compression;
    const encoding = headers.get(headers_js_1.headerEncoding);
    if (encoding !== null && encoding.toLowerCase() !== "identity") {
        compression = acceptCompression.find((c) => c.name === encoding);
        if (!compression) {
            throw new connect_error_js_1.ConnectError(`unsupported response encoding "${encoding}"`, code_js_1.Code.InvalidArgument);
        }
    }
    return {
        foundStatus,
        compression,
    };
}
exports.validateResponseWithCompression = validateResponseWithCompression;
