"use strict";
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stubTransport = void 0;
const interceptor_js_1 = require("./interceptor.js");
const index_js_1 = require("./protocol/index.js");
function stubTransport(options) {
    return {
        unary(service, method, signal, timeoutMs, header, message) {
            return (0, interceptor_js_1.runUnary)(createUnaryRequest(options, service, method, signal, header, message), (req) => Promise.resolve(createUnaryResponse(options, service, method, req)), options.interceptors);
        },
        stream(service, method, signal, timeoutMs, header, input) {
            return (0, interceptor_js_1.runStreaming)(createStreamingRequest(options, service, method, signal, header, input), (req) => Promise.resolve(createStreamingResponse(options, req)), options.interceptors);
        },
    };
}
exports.stubTransport = stubTransport;
/**
 * Create a request with a single message.
 */
function createUnaryRequest(stub, service, method, signal, header, message) {
    signal = signal !== null && signal !== void 0 ? signal : new AbortController().signal;
    return {
        stream: false,
        service,
        method,
        url: (0, index_js_1.createMethodUrl)("", service, method),
        init: {},
        signal,
        header: new Headers(header !== null && header !== void 0 ? header : {}),
        message: new method.I(message),
    };
}
/**
 * Create a response with a single message with default values.
 */
function createUnaryResponse(stub, service, method, request // eslint-disable-line @typescript-eslint/no-unused-vars
) {
    return {
        stream: false,
        service,
        method,
        header: new Headers(stub.unaryResponseHeader),
        message: new method.O(),
        trailer: new Headers(stub.unaryResponseTrailer),
    };
}
function createStreamingRequest(stub, service, method, signal, header, input) {
    return {
        stream: true,
        service,
        method,
        url: (0, index_js_1.createMethodUrl)("", service, method),
        init: {},
        signal: signal !== null && signal !== void 0 ? signal : new AbortController().signal,
        header: new Headers(header),
        message: input,
    };
}
/**
 * Create a streaming response with three messages with default values.
 */
function createStreamingResponse(stub, request) {
    var _a;
    const streamRead = (_a = stub.streamOutput) !== null && _a !== void 0 ? _a : [null];
    const trailer = new Headers();
    // eslint-disable-next-line @typescript-eslint/require-await
    function output() {
        return __asyncGenerator(this, arguments, function* output_1() {
            var _a, e_1, _b, _c;
            try {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                for (var _d = true, _e = __asyncValues(request.message), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const _ = _c;
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
            for (const nullOrConnectErr of streamRead) {
                if (nullOrConnectErr === null) {
                    yield yield __await(new request.method.O());
                }
                else {
                    throw nullOrConnectErr;
                }
            }
            if (stub.streamResponseTrailer) {
                new Headers(stub.streamResponseTrailer).forEach((value, key) => trailer.set(key, value));
            }
        });
    }
    return {
        stream: true,
        service: request.service,
        method: request.method,
        header: new Headers(stub.streamResponseHeader),
        trailer,
        message: output(),
    };
}
