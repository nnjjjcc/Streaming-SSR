"use strict";
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUniversalHandlerClient = void 0;
const code_js_1 = require("../code.js");
const connect_error_js_1 = require("../connect-error.js");
const async_iterable_js_1 = require("./async-iterable.js");
/**
 * An in-memory UniversalClientFn that can be used to route requests to a ConnectRouter
 * bypassing network calls. Useful for testing and calling in-process services.
 */
function createUniversalHandlerClient(uHandlers) {
    const handlerMap = new Map();
    for (const handler of uHandlers) {
        handlerMap.set(handler.requestPath, handler);
    }
    return async (uClientReq) => {
        var _a;
        const reqUrl = new URL(uClientReq.url);
        const handler = handlerMap.get(reqUrl.pathname);
        if (!handler) {
            throw new connect_error_js_1.ConnectError(`RouterHttpClient: no handler registered for ${reqUrl.pathname}`, code_js_1.Code.Unimplemented);
        }
        const uServerRes = await handler({
            body: uClientReq.body,
            httpVersion: "2.0",
            method: uClientReq.method,
            url: reqUrl,
            header: uClientReq.header,
        });
        let body = (_a = uServerRes.body) !== null && _a !== void 0 ? _a : new Uint8Array();
        if (body instanceof Uint8Array) {
            body = (0, async_iterable_js_1.createAsyncIterable)([body]);
        }
        return {
            body: body,
            header: new Headers(uServerRes.header),
            status: uServerRes.status,
            trailer: new Headers(uServerRes.trailer),
        };
    };
}
exports.createUniversalHandlerClient = createUniversalHandlerClient;
