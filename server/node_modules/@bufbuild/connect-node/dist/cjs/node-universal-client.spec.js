"use strict";
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const http2 = require("http2");
const protocol_1 = require("@bufbuild/connect/protocol");
const node_universal_client_js_1 = require("./node-universal-client.js");
const protocol_2 = require("@bufbuild/connect/protocol");
describe("Node.js http2 API", function () {
    it("should see reset codes from the client side on the server", async function () {
        const server = await startServer();
        await h2RequestWithReset(server.baseUrl, http2.constants.NGHTTP2_CANCEL);
        const { rstCode } = await server.stop();
        expect(rstCode).toBe(http2.constants.NGHTTP2_CANCEL);
    });
    /**
     * Issues an H2 request, and immediately resets with the given code.
     */
    async function h2RequestWithReset(baseUrl, rstCode) {
        return new Promise((resolve) => {
            http2.connect(baseUrl, (session) => {
                const stream = session.request({
                    ":method": "POST",
                    ":path": "/",
                }, {});
                setTimeout(() => {
                    stream.close(rstCode, () => {
                        session.close();
                        setTimeout(() => resolve(), 0);
                    });
                }, 0);
            });
        });
    }
});
describe("universal node http2 client", function () {
    describe("with a signal that is already aborted", function () {
        it("should raise error with code canceled", async function () {
            const signal = AbortSignal.abort();
            const client = (0, node_universal_client_js_1.createNodeHttp2Client)("http://example.com", false, undefined);
            try {
                await client({
                    url: "http://example.com",
                    method: "POST",
                    header: new Headers(),
                    body: (0, protocol_1.createAsyncIterable)([]),
                    signal,
                });
                fail("expected error");
            }
            catch (e) {
                expect(e.message).toBe("[canceled] operation was aborted via signal");
            }
        });
    });
    describe("with a signal aborting mid request", function () {
        it("should send RST_STREAM with code CANCEL", async function () {
            const server = await startServer();
            // set up a client that aborts while still streaming the request body
            const ac = new AbortController();
            const client = (0, node_universal_client_js_1.createNodeHttp2Client)(server.baseUrl, false, undefined);
            function body() {
                return __asyncGenerator(this, arguments, function* body_1() {
                    yield __await(new Promise((resolve) => setTimeout(resolve, 50)));
                    ac.abort();
                    yield yield __await((0, protocol_2.encodeEnvelope)(0, new Uint8Array(0)));
                });
            }
            try {
                await client({
                    url: server.baseUrl,
                    method: "POST",
                    header: new Headers(),
                    body: body(),
                    signal: ac.signal,
                });
                fail("expected error");
            }
            catch (e) {
                expect(e.message).toBe("[canceled] operation was aborted via signal");
            }
            const { rstCode } = await server.stop();
            expect(rstCode).toBe(http2.constants.NGHTTP2_CANCEL);
        });
    });
});
/**
 * Start an H2 server that expects all requests to be closed right away.
 * When stopped, waits for all connections to close, then returns the last
 * received reset code.
 */
async function startServer() {
    const s = http2.createServer({});
    let rstCode = -1;
    s.on("stream", (stream) => {
        stream.on("close", () => {
            rstCode = stream.rstCode;
        });
    });
    await new Promise((resolve) => {
        s.listen(0, () => resolve(s));
    });
    return {
        baseUrl: `http://localhost:${s.address().port}`,
        async stop() {
            for (;;) {
                const count = await new Promise((resolve, reject) => {
                    s.getConnections((err, count) => {
                        if (err) {
                            return reject(err);
                        }
                        return resolve(count);
                    });
                });
                if (count === 0) {
                    break;
                }
                await new Promise((resolve) => setTimeout(resolve, 10));
            }
            s.close();
            return Promise.resolve({
                rstCode,
            });
        },
    };
}
