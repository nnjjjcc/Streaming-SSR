/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type * as http2 from "http2";
import type * as http from "http";
import type * as https from "https";
import type { CommonTransportOptions } from "@bufbuild/connect/protocol";
/**
 * Options specific to the Node.js built in http and https modules.
 */
export interface NodeHttp1TransportOptions {
    httpVersion: "1.1";
    /**
     * Options passed to the request() call of the Node.js built-in
     * http or https module.
     */
    nodeOptions?: Omit<http.RequestOptions, "signal"> | Omit<https.RequestOptions, "signal">;
}
/**
 * Options specific to the Node.js built in http2 module.
 */
export interface NodeHttp2TransportOptions {
    httpVersion: "2";
    /**
     * Options passed to the connect() call of the Node.js built-in
     * http2 module.
     */
    nodeOptions?: http2.ClientSessionOptions | http2.SecureClientSessionOptions;
    /**
     * By default, HTTP/2 sessions are terminated after each request.
     * Set this option to true to keep sessions alive across multiple
     * requests.
     */
    keepSessionAlive?: boolean;
}
/**
 * Options that are common to all client transports for Node.js.
 */
type CommonNodeTransportOptions = (NodeHttp1TransportOptions | NodeHttp2TransportOptions) & Partial<Omit<CommonTransportOptions, "baseUrl">> & Pick<CommonTransportOptions, "baseUrl">;
/**
 * Asserts that the options are within sane limits, and returns default values
 * where no value is provided.
 */
export declare function validateNodeTransportOptions(options: CommonNodeTransportOptions): {
    client: import("@bufbuild/connect/protocol").UniversalClientFn;
    sendCompression: import("@bufbuild/connect/protocol").Compression | null;
    acceptCompression: import("@bufbuild/connect/protocol").Compression[];
    readMaxBytes: number;
    writeMaxBytes: number;
    compressMinBytes: number;
    baseUrl: string;
    useBinaryFormat: boolean;
    interceptors: import("@bufbuild/connect").Interceptor[];
};
export {};
