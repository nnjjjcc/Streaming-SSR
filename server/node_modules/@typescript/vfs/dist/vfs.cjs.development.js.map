{"version":3,"file":"vfs.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["type System = import(\"typescript\").System\ntype CompilerOptions = import(\"typescript\").CompilerOptions\ntype CustomTransformers = import(\"typescript\").CustomTransformers\ntype LanguageServiceHost = import(\"typescript\").LanguageServiceHost\ntype CompilerHost = import(\"typescript\").CompilerHost\ntype SourceFile = import(\"typescript\").SourceFile\ntype TS = typeof import(\"typescript\")\n\nlet hasLocalStorage = false\ntry {\n  hasLocalStorage = typeof localStorage !== `undefined`\n} catch (error) { }\n\nconst hasProcess = typeof process !== `undefined`\nconst shouldDebug = (hasLocalStorage && localStorage.getItem(\"DEBUG\")) || (hasProcess && process.env.DEBUG)\nconst debugLog = shouldDebug ? console.log : (_message?: any, ..._optionalParams: any[]) => \"\"\n\nexport interface VirtualTypeScriptEnvironment {\n  sys: System\n  languageService: import(\"typescript\").LanguageService\n  getSourceFile: (fileName: string) => import(\"typescript\").SourceFile | undefined\n  createFile: (fileName: string, content: string) => void\n  updateFile: (fileName: string, content: string, replaceTextSpan?: import(\"typescript\").TextSpan) => void\n}\n\n/**\n * Makes a virtual copy of the TypeScript environment. This is the main API you want to be using with\n * @typescript/vfs. A lot of the other exposed functions are used by this function to get set up.\n *\n * @param sys an object which conforms to the TS Sys (a shim over read/write access to the fs)\n * @param rootFiles a list of files which are considered inside the project\n * @param ts a copy pf the TypeScript module\n * @param compilerOptions the options for this compiler run\n * @param customTransformers custom transformers for this compiler run\n */\n\nexport function createVirtualTypeScriptEnvironment(\n  sys: System,\n  rootFiles: string[],\n  ts: TS,\n  compilerOptions: CompilerOptions = {},\n  customTransformers?: CustomTransformers\n): VirtualTypeScriptEnvironment {\n  const mergedCompilerOpts = { ...defaultCompilerOptions(ts), ...compilerOptions }\n\n  const { languageServiceHost, updateFile } = createVirtualLanguageServiceHost(\n    sys,\n    rootFiles,\n    mergedCompilerOpts,\n    ts,\n    customTransformers\n  )\n  const languageService = ts.createLanguageService(languageServiceHost)\n  const diagnostics = languageService.getCompilerOptionsDiagnostics()\n\n  if (diagnostics.length) {\n    const compilerHost = createVirtualCompilerHost(sys, compilerOptions, ts)\n    throw new Error(ts.formatDiagnostics(diagnostics, compilerHost.compilerHost))\n  }\n\n  return {\n    // @ts-ignore\n    name: \"vfs\",\n    sys,\n    languageService,\n    getSourceFile: fileName => languageService.getProgram()?.getSourceFile(fileName),\n\n    createFile: (fileName, content) => {\n      updateFile(ts.createSourceFile(fileName, content, mergedCompilerOpts.target!, false))\n    },\n    updateFile: (fileName, content, optPrevTextSpan) => {\n      const prevSourceFile = languageService.getProgram()!.getSourceFile(fileName)\n      if (!prevSourceFile) {\n        throw new Error(\"Did not find a source file for \" + fileName)\n      }\n      const prevFullContents = prevSourceFile.text\n\n      // TODO: Validate if the default text span has a fencepost error?\n      const prevTextSpan = optPrevTextSpan ?? ts.createTextSpan(0, prevFullContents.length)\n      const newText =\n        prevFullContents.slice(0, prevTextSpan.start) +\n        content +\n        prevFullContents.slice(prevTextSpan.start + prevTextSpan.length)\n      const newSourceFile = ts.updateSourceFile(prevSourceFile, newText, {\n        span: prevTextSpan,\n        newLength: content.length,\n      })\n\n      updateFile(newSourceFile)\n    },\n  }\n}\n\n// TODO: This could be replaced by grabbing: https://github.com/microsoft/TypeScript/blob/main/src/lib/libs.json\n// and then using that to generate the list of files from the server, but it is not included in the npm package\n\n/**\n * Grab the list of lib files for a particular target, will return a bit more than necessary (by including\n * the dom) but that's OK, we're really working with the constraint that you can't get a list of files\n * when running in a browser.\n *\n * @param target The compiler settings target baseline\n * @param ts A copy of the TypeScript module\n */\nexport const knownLibFilesForCompilerOptions = (compilerOptions: CompilerOptions, ts: TS) => {\n  const target = compilerOptions.target || ts.ScriptTarget.ES5\n  const lib = compilerOptions.lib || []\n\n  // Note that this will include files which can't be found for particular versions of TS\n  // TODO: Replace this with some sort of API call if https://github.com/microsoft/TypeScript/pull/54011\n  // or similar is merged.\n  const files = [\n    \"lib.d.ts\",\n    \"lib.decorators.d.ts\",\n    \"lib.decorators.legacy.d.ts\",\n    \"lib.dom.d.ts\",\n    \"lib.dom.iterable.d.ts\",\n    \"lib.webworker.d.ts\",\n    \"lib.webworker.importscripts.d.ts\",\n    \"lib.webworker.iterable.d.ts\",\n    \"lib.scripthost.d.ts\",\n    \"lib.es5.d.ts\",\n    \"lib.es6.d.ts\",\n    \"lib.es2015.collection.d.ts\",\n    \"lib.es2015.core.d.ts\",\n    \"lib.es2015.d.ts\",\n    \"lib.es2015.generator.d.ts\",\n    \"lib.es2015.iterable.d.ts\",\n    \"lib.es2015.promise.d.ts\",\n    \"lib.es2015.proxy.d.ts\",\n    \"lib.es2015.reflect.d.ts\",\n    \"lib.es2015.symbol.d.ts\",\n    \"lib.es2015.symbol.wellknown.d.ts\",\n    \"lib.es2016.array.include.d.ts\",\n    \"lib.es2016.d.ts\",\n    \"lib.es2016.full.d.ts\",\n    \"lib.es2017.d.ts\",\n    \"lib.es2017.date.d.ts\",\n    \"lib.es2017.full.d.ts\",\n    \"lib.es2017.intl.d.ts\",\n    \"lib.es2017.object.d.ts\",\n    \"lib.es2017.sharedmemory.d.ts\",\n    \"lib.es2017.string.d.ts\",\n    \"lib.es2017.typedarrays.d.ts\",\n    \"lib.es2018.asyncgenerator.d.ts\",\n    \"lib.es2018.asynciterable.d.ts\",\n    \"lib.es2018.d.ts\",\n    \"lib.es2018.full.d.ts\",\n    \"lib.es2018.intl.d.ts\",\n    \"lib.es2018.promise.d.ts\",\n    \"lib.es2018.regexp.d.ts\",\n    \"lib.es2019.array.d.ts\",\n    \"lib.es2019.d.ts\",\n    \"lib.es2019.full.d.ts\",\n    \"lib.es2019.intl.d.ts\",\n    \"lib.es2019.object.d.ts\",\n    \"lib.es2019.string.d.ts\",\n    \"lib.es2019.symbol.d.ts\",\n    \"lib.es2020.bigint.d.ts\",\n    \"lib.es2020.d.ts\",\n    \"lib.es2020.date.d.ts\",\n    \"lib.es2020.full.d.ts\",\n    \"lib.es2020.intl.d.ts\",\n    \"lib.es2020.number.d.ts\",\n    \"lib.es2020.promise.d.ts\",\n    \"lib.es2020.sharedmemory.d.ts\",\n    \"lib.es2020.string.d.ts\",\n    \"lib.es2020.symbol.wellknown.d.ts\",\n    \"lib.es2021.d.ts\",\n    \"lib.es2021.full.d.ts\",\n    \"lib.es2021.intl.d.ts\",\n    \"lib.es2021.promise.d.ts\",\n    \"lib.es2021.string.d.ts\",\n    \"lib.es2021.weakref.d.ts\",\n    \"lib.es2022.array.d.ts\",\n    \"lib.es2022.d.ts\",\n    \"lib.es2022.error.d.ts\",\n    \"lib.es2022.full.d.ts\",\n    \"lib.es2022.intl.d.ts\",\n    \"lib.es2022.object.d.ts\",\n    \"lib.es2022.regexp.d.ts\",\n    \"lib.es2022.sharedmemory.d.ts\",\n    \"lib.es2022.string.d.ts\",\n    \"lib.es2023.array.d.ts\",\n    \"lib.es2023.collection.d.ts\",\n    \"lib.es2023.d.ts\",\n    \"lib.es2023.full.d.ts\",\n    \"lib.esnext.array.d.ts\",\n    \"lib.esnext.asynciterable.d.ts\",\n    \"lib.esnext.bigint.d.ts\",\n    \"lib.esnext.d.ts\",\n    \"lib.esnext.decorators.d.ts\",\n    \"lib.esnext.disposable.d.ts\",\n    \"lib.esnext.full.d.ts\",\n    \"lib.esnext.intl.d.ts\",\n    \"lib.esnext.promise.d.ts\",\n    \"lib.esnext.string.d.ts\",\n    \"lib.esnext.symbol.d.ts\",\n    \"lib.esnext.weakref.d.ts\"\n  ]\n\n  const targetToCut = ts.ScriptTarget[target]\n  const matches = files.filter(f => f.startsWith(`lib.${targetToCut.toLowerCase()}`))\n  const targetCutIndex = files.indexOf(matches.pop()!)\n\n  const getMax = (array: number[]) =>\n    array && array.length ? array.reduce((max, current) => (current > max ? current : max)) : undefined\n\n  // Find the index for everything in\n  const indexesForCutting = lib.map(lib => {\n    const matches = files.filter(f => f.startsWith(`lib.${lib.toLowerCase()}`))\n    if (matches.length === 0) return 0\n\n    const cutIndex = files.indexOf(matches.pop()!)\n    return cutIndex\n  })\n\n  const libCutIndex = getMax(indexesForCutting) || 0\n\n  const finalCutIndex = Math.max(targetCutIndex, libCutIndex)\n  return files.slice(0, finalCutIndex + 1)\n}\n\n/**\n * Sets up a Map with lib contents by grabbing the necessary files from\n * the local copy of typescript via the file system.\n *\n * The first two args are un-used, but kept around so as to not cause a\n * semver major bump for no gain to module users.\n */\nexport const createDefaultMapFromNodeModules = (\n  _compilerOptions: CompilerOptions,\n  _ts?: typeof import(\"typescript\"),\n  tsLibDirectory?: string\n) => {\n  const path = requirePath()\n  const fs = requireFS()\n\n  const getLib = (name: string) => {\n    const lib = tsLibDirectory || path.dirname(require.resolve(\"typescript\"))\n    return fs.readFileSync(path.join(lib, name), \"utf8\")\n  }\n\n  const libFiles = fs.readdirSync(tsLibDirectory || path.dirname(require.resolve(\"typescript\")))\n  const knownLibFiles = libFiles.filter(f => f.startsWith(\"lib.\") && f.endsWith(\".d.ts\"))\n\n  const fsMap = new Map<string, string>()\n  knownLibFiles.forEach(lib => {\n    fsMap.set(\"/\" + lib, getLib(lib))\n  })\n  return fsMap\n}\n\n/**\n * Adds recursively files from the FS into the map based on the folder\n */\nexport const addAllFilesFromFolder = (map: Map<string, string>, workingDir: string): void => {\n  const path = requirePath()\n  const fs = requireFS()\n\n  const walk = function (dir: string) {\n    let results: string[] = []\n    const list = fs.readdirSync(dir)\n    list.forEach(function (file: string) {\n      file = path.join(dir, file)\n      const stat = fs.statSync(file)\n      if (stat && stat.isDirectory()) {\n        /* Recurse into a subdirectory */\n        results = results.concat(walk(file))\n      } else {\n        /* Is a file */\n        results.push(file)\n      }\n    })\n    return results\n  }\n\n  const allFiles = walk(workingDir)\n\n  allFiles.forEach(lib => {\n    const fsPath = \"/node_modules/@types\" + lib.replace(workingDir, \"\")\n    const content = fs.readFileSync(lib, \"utf8\")\n    const validExtensions = [\".ts\", \".tsx\"]\n\n    if (validExtensions.includes(path.extname(fsPath))) {\n      map.set(fsPath, content)\n    }\n  })\n}\n\n/** Adds all files from node_modules/@types into the FS Map */\nexport const addFilesForTypesIntoFolder = (map: Map<string, string>) =>\n  addAllFilesFromFolder(map, \"node_modules/@types\")\n\n/**\n * Create a virtual FS Map with the lib files from a particular TypeScript\n * version based on the target, Always includes dom ATM.\n *\n * @param options The compiler target, which dictates the libs to set up\n * @param version the versions of TypeScript which are supported\n * @param cache should the values be stored in local storage\n * @param ts a copy of the typescript import\n * @param lzstring an optional copy of the lz-string import\n * @param fetcher an optional replacement for the global fetch function (tests mainly)\n * @param storer an optional replacement for the localStorage global (tests mainly)\n */\nexport const createDefaultMapFromCDN = (\n  options: CompilerOptions,\n  version: string,\n  cache: boolean,\n  ts: TS,\n  lzstring?: typeof import(\"lz-string\"),\n  fetcher?: typeof fetch,\n  storer?: typeof localStorage\n) => {\n  const fetchlike = fetcher || fetch\n  const fsMap = new Map<string, string>()\n  const files = knownLibFilesForCompilerOptions(options, ts)\n  const prefix = `https://typescript.azureedge.net/cdn/${version}/typescript/lib/`\n\n  function zip(str: string) {\n    return lzstring ? lzstring.compressToUTF16(str) : str\n  }\n\n  function unzip(str: string) {\n    return lzstring ? lzstring.decompressFromUTF16(str) : str\n  }\n\n  // Map the known libs to a node fetch promise, then return the contents\n  function uncached() {\n    return (\n      Promise.all(files.map(lib => fetchlike(prefix + lib).then(resp => resp.text())))\n        .then(contents => {\n          contents.forEach((text, index) => fsMap.set(\"/\" + files[index], text))\n        })\n        // Return a NOOP for .d.ts files which aren't in the current build of TypeScript\n        .catch(() => { })\n    )\n  }\n\n  // A localstorage and lzzip aware version of the lib files\n  function cached() {\n    const storelike = storer || localStorage\n\n    const keys = Object.keys(storelike)\n    keys.forEach(key => {\n      // Remove anything which isn't from this version\n      if (key.startsWith(\"ts-lib-\") && !key.startsWith(\"ts-lib-\" + version)) {\n        storelike.removeItem(key)\n      }\n    })\n\n    return Promise.all(\n      files.map(lib => {\n        const cacheKey = `ts-lib-${version}-${lib}`\n        const content = storelike.getItem(cacheKey)\n\n        if (!content) {\n          // Make the API call and store the text concent in the cache\n          return (\n            fetchlike(prefix + lib)\n              .then(resp => resp.text())\n              .then(t => {\n                storelike.setItem(cacheKey, zip(t))\n                return t\n              })\n              // Return a NOOP for .d.ts files which aren't in the current build of TypeScript\n              .catch(() => { })\n          )\n        } else {\n          return Promise.resolve(unzip(content))\n        }\n      })\n    ).then(contents => {\n      contents.forEach((text, index) => {\n        if (text) {\n          const name = \"/\" + files[index]\n          fsMap.set(name, text)\n        }\n      })\n    })\n  }\n\n  const func = cache ? cached : uncached\n  return func().then(() => fsMap)\n}\n\nfunction notImplemented(methodName: string): any {\n  throw new Error(`Method '${methodName}' is not implemented.`)\n}\n\nfunction audit<ArgsT extends any[], ReturnT>(\n  name: string,\n  fn: (...args: ArgsT) => ReturnT\n): (...args: ArgsT) => ReturnT {\n  return (...args) => {\n    const res = fn(...args)\n\n    const smallres = typeof res === \"string\" ? res.slice(0, 80) + \"...\" : res\n    debugLog(\"> \" + name, ...args)\n    debugLog(\"< \" + smallres)\n\n    return res\n  }\n}\n\n/** The default compiler options if TypeScript could ever change the compiler options */\nconst defaultCompilerOptions = (ts: typeof import(\"typescript\")): CompilerOptions => {\n  return {\n    ...ts.getDefaultCompilerOptions(),\n    jsx: ts.JsxEmit.React,\n    strict: true,\n    esModuleInterop: true,\n    module: ts.ModuleKind.ESNext,\n    suppressOutputPathCheck: true,\n    skipLibCheck: true,\n    skipDefaultLibCheck: true,\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n  }\n}\n\n// \"/DOM.d.ts\" => \"/lib.dom.d.ts\"\nconst libize = (path: string) => path.replace(\"/\", \"/lib.\").toLowerCase()\n\n/**\n * Creates an in-memory System object which can be used in a TypeScript program, this\n * is what provides read/write aspects of the virtual fs\n */\nexport function createSystem(files: Map<string, string>): System {\n  return {\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory))\n    }),\n    exit: () => notImplemented(\"exit\"),\n    fileExists: audit(\"fileExists\", fileName => files.has(fileName) || files.has(libize(fileName))),\n    getCurrentDirectory: () => \"/\",\n    getDirectories: () => [],\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", directory => (directory === \"/\" ? Array.from(files.keys()) : [])),\n    readFile: audit(\"readFile\", fileName => files.get(fileName) || files.get(libize(fileName))),\n    resolvePath: path => path,\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n  }\n}\n\n/**\n * Creates a file-system backed System object which can be used in a TypeScript program, you provide\n * a set of virtual files which are prioritised over the FS versions, then a path to the root of your\n * project (basically the folder your node_modules lives)\n */\nexport function createFSBackedSystem(\n  files: Map<string, string>,\n  _projectRoot: string,\n  ts: TS,\n  tsLibDirectory?: string\n): System {\n  // We need to make an isolated folder for the tsconfig, but also need to be able to resolve the\n  // existing node_modules structures going back through the history\n  const root = _projectRoot + \"/vfs\"\n  const path = requirePath()\n\n  // The default System in TypeScript\n  const nodeSys = ts.sys\n  const tsLib = tsLibDirectory ?? path.dirname(require.resolve(\"typescript\"))\n\n  return {\n    // @ts-ignore\n    name: \"fs-vfs\",\n    root,\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory)) || nodeSys.directoryExists(directory)\n    }),\n    exit: nodeSys.exit,\n    fileExists: audit(\"fileExists\", fileName => {\n      if (files.has(fileName)) return true\n      // Don't let other tsconfigs end up touching the vfs\n      if (fileName.includes(\"tsconfig.json\") || fileName.includes(\"tsconfig.json\")) return false\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        return nodeSys.fileExists(tsLibName)\n      }\n      return nodeSys.fileExists(fileName)\n    }),\n    getCurrentDirectory: () => root,\n    getDirectories: nodeSys.getDirectories,\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", (...args) => {\n      if (args[0] === \"/\") {\n        return Array.from(files.keys())\n      } else {\n        return nodeSys.readDirectory(...args)\n      }\n    }),\n    readFile: audit(\"readFile\", fileName => {\n      if (files.has(fileName)) return files.get(fileName)\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        const result = nodeSys.readFile(tsLibName)\n        if (!result) {\n          const libs = nodeSys.readDirectory(tsLib)\n          throw new Error(\n            `TSVFS: A request was made for ${tsLibName} but there wasn't a file found in the file map. You likely have a mismatch in the compiler options for the CDN download vs the compiler program. Existing Libs: ${libs}.`\n          )\n        }\n        return result\n      }\n      return nodeSys.readFile(fileName)\n    }),\n    resolvePath: path => {\n      if (files.has(path)) return path\n      return nodeSys.resolvePath(path)\n    },\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n  }\n}\n\n/**\n * Creates an in-memory CompilerHost -which is essentially an extra wrapper to System\n * which works with TypeScript objects - returns both a compiler host, and a way to add new SourceFile\n * instances to the in-memory file system.\n */\nexport function createVirtualCompilerHost(sys: System, compilerOptions: CompilerOptions, ts: TS) {\n  const sourceFiles = new Map<string, SourceFile>()\n  const save = (sourceFile: SourceFile) => {\n    sourceFiles.set(sourceFile.fileName, sourceFile)\n    return sourceFile\n  }\n\n  type Return = {\n    compilerHost: CompilerHost\n    updateFile: (sourceFile: SourceFile) => boolean\n  }\n\n  const vHost: Return = {\n    compilerHost: {\n      ...sys,\n      getCanonicalFileName: fileName => fileName,\n      getDefaultLibFileName: () => \"/\" + ts.getDefaultLibFileName(compilerOptions), // '/lib.d.ts',\n      // getDefaultLibLocation: () => '/',\n      getDirectories: () => [],\n      getNewLine: () => sys.newLine,\n      getSourceFile: fileName => {\n        return (\n          sourceFiles.get(fileName) ||\n          save(\n            ts.createSourceFile(\n              fileName,\n              sys.readFile(fileName)!,\n              compilerOptions.target || defaultCompilerOptions(ts).target!,\n              false\n            )\n          )\n        )\n      },\n      useCaseSensitiveFileNames: () => sys.useCaseSensitiveFileNames,\n    },\n    updateFile: sourceFile => {\n      const alreadyExists = sourceFiles.has(sourceFile.fileName)\n      sys.writeFile(sourceFile.fileName, sourceFile.text)\n      sourceFiles.set(sourceFile.fileName, sourceFile)\n      return alreadyExists\n    },\n  }\n  return vHost\n}\n\n/**\n * Creates an object which can host a language service against the virtual file-system\n */\nexport function createVirtualLanguageServiceHost(\n  sys: System,\n  rootFiles: string[],\n  compilerOptions: CompilerOptions,\n  ts: TS,\n  customTransformers?: CustomTransformers\n) {\n  const fileNames = [...rootFiles]\n  const { compilerHost, updateFile } = createVirtualCompilerHost(sys, compilerOptions, ts)\n  const fileVersions = new Map<string, string>()\n  let projectVersion = 0\n  const languageServiceHost: LanguageServiceHost = {\n    ...compilerHost,\n    getProjectVersion: () => projectVersion.toString(),\n    getCompilationSettings: () => compilerOptions,\n    getCustomTransformers: () => customTransformers,\n    // A couple weeks of 4.8 TypeScript nightlies had a bug where the Program's\n    // list of files was just a reference to the array returned by this host method,\n    // which means mutations by the host that ought to result in a new Program being\n    // created were not detected, since the old list of files and the new list of files\n    // were in fact a reference to the same underlying array. That was fixed in\n    // https://github.com/microsoft/TypeScript/pull/49813, but since the twoslash runner\n    // is used in bisecting for changes, it needs to guard against being busted in that\n    // couple-week period, so we defensively make a slice here.\n    getScriptFileNames: () => fileNames.slice(),\n    getScriptSnapshot: fileName => {\n      const contents = sys.readFile(fileName)\n      if (contents) {\n        return ts.ScriptSnapshot.fromString(contents)\n      }\n      return\n    },\n    getScriptVersion: fileName => {\n      return fileVersions.get(fileName) || \"0\"\n    },\n    writeFile: sys.writeFile,\n  }\n\n  type Return = {\n    languageServiceHost: LanguageServiceHost\n    updateFile: (sourceFile: import(\"typescript\").SourceFile) => void\n  }\n\n  const lsHost: Return = {\n    languageServiceHost,\n    updateFile: sourceFile => {\n      projectVersion++\n      fileVersions.set(sourceFile.fileName, projectVersion.toString())\n      if (!fileNames.includes(sourceFile.fileName)) {\n        fileNames.push(sourceFile.fileName)\n      }\n      updateFile(sourceFile)\n    },\n  }\n  return lsHost\n}\n\nconst requirePath = () => {\n  return require(String.fromCharCode(112, 97, 116, 104)) as typeof import(\"path\")\n}\n\nconst requireFS = () => {\n  return require(String.fromCharCode(102, 115)) as typeof import(\"fs\")\n}\n"],"names":["hasLocalStorage","localStorage","error","hasProcess","process","shouldDebug","getItem","env","DEBUG","debugLog","console","log","_message","createVirtualTypeScriptEnvironment","sys","rootFiles","ts","compilerOptions","customTransformers","mergedCompilerOpts","defaultCompilerOptions","createVirtualLanguageServiceHost","languageServiceHost","updateFile","languageService","createLanguageService","diagnostics","getCompilerOptionsDiagnostics","length","compilerHost","createVirtualCompilerHost","Error","formatDiagnostics","name","getSourceFile","fileName","getProgram","createFile","content","createSourceFile","target","optPrevTextSpan","prevSourceFile","prevFullContents","text","prevTextSpan","createTextSpan","newText","slice","start","newSourceFile","updateSourceFile","span","newLength","knownLibFilesForCompilerOptions","ScriptTarget","ES5","lib","files","targetToCut","matches","filter","f","startsWith","toLowerCase","targetCutIndex","indexOf","pop","getMax","array","reduce","max","current","undefined","indexesForCutting","map","cutIndex","libCutIndex","finalCutIndex","Math","createDefaultMapFromNodeModules","_compilerOptions","_ts","tsLibDirectory","path","requirePath","fs","requireFS","getLib","dirname","require","resolve","readFileSync","join","libFiles","readdirSync","knownLibFiles","endsWith","fsMap","Map","forEach","set","addAllFilesFromFolder","workingDir","walk","dir","results","list","file","stat","statSync","isDirectory","concat","push","allFiles","fsPath","replace","validExtensions","includes","extname","addFilesForTypesIntoFolder","createDefaultMapFromCDN","options","version","cache","lzstring","fetcher","storer","fetchlike","fetch","prefix","zip","str","compressToUTF16","unzip","decompressFromUTF16","uncached","Promise","all","then","resp","contents","index","cached","storelike","keys","Object","key","removeItem","cacheKey","t","setItem","func","notImplemented","methodName","audit","fn","args","res","smallres","getDefaultCompilerOptions","jsx","JsxEmit","React","strict","esModuleInterop","module","ModuleKind","ESNext","suppressOutputPathCheck","skipLibCheck","skipDefaultLibCheck","moduleResolution","ModuleResolutionKind","NodeJs","libize","createSystem","createDirectory","directoryExists","directory","Array","from","some","exit","fileExists","has","getCurrentDirectory","getDirectories","getExecutingFilePath","readDirectory","readFile","get","resolvePath","newLine","useCaseSensitiveFileNames","write","writeFile","createFSBackedSystem","_projectRoot","root","nodeSys","tsLib","tsLibName","result","libs","sourceFiles","save","sourceFile","vHost","getCanonicalFileName","getDefaultLibFileName","getNewLine","alreadyExists","fileNames","fileVersions","projectVersion","getProjectVersion","toString","getCompilationSettings","getCustomTransformers","getScriptFileNames","getScriptSnapshot","ScriptSnapshot","fromString","getScriptVersion","lsHost","String","fromCharCode"],"mappings":"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"}