export type Protocol = 'tcp' | 'http' | 'thrift' | 'grpc' | 'corvus';
export interface DiscoverOptions {
    name: string;
    protocol: Protocol;
    envTag?: string;
    forceEDS?: boolean;
}
export interface DiscoverOnceOptions extends DiscoverOptions {
    timeout?: number;
}
export type NotifierDiscoverOptions = Pick<DiscoverOptions, 'envTag'>;
export interface NotifierDiscoverOnceOptions extends Pick<DiscoverOnceOptions, 'envTag' | 'timeout'> {
    loose?: boolean;
    startTime?: number;
}
export interface Address {
    ip: string;
    port: number;
    envTag: string;
}
export interface Locality {
    region?: string;
    zone?: string;
    subZone?: string;
}
export interface Metadata {
    tags?: {
        appid?: string;
        hostname?: string;
        tags?: string;
        weight?: number;
    };
}
export interface Resource {
    address: Address;
    locality?: Locality;
    metadata?: Metadata;
    priority: number;
}
export type Listener = (value: {
    resource: Record<string, Resource[]>;
    diff: Record<string, boolean>;
}) => void;
export type WorkerMessageType = 'subscribe' | 'exit';
export interface WorkerExitMessage {
    type: 'exit';
    value: number;
}
export interface WorkerSubscribeMessage {
    type: 'subscribe';
    value: {
        name: string;
        protocol: Protocol;
    };
}
export type WorkerMessage = WorkerExitMessage | WorkerSubscribeMessage;
