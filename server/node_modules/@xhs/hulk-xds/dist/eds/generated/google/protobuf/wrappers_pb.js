"use strict";
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Wrappers for primitive (non-message) types. These types are useful
// for embedding primitives in the `google.protobuf.Any` type and for places
// where we need to distinguish between the absence of a primitive
// typed field and its default value.
//
// These wrappers have no meaningful use within repeated fields as they lack
// the ability to detect presence on individual elements.
// These wrappers have no meaningful use within a map or a oneof since
// individual entries of a map or fields of a oneof can already detect presence.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BytesValue = exports.StringValue = exports.BoolValue = exports.UInt32Value = exports.Int32Value = exports.UInt64Value = exports.Int64Value = exports.FloatValue = exports.DoubleValue = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 *
 * @generated from message google.protobuf.DoubleValue
 */
class DoubleValue extends protobuf_1.Message {
    /**
     * The double value.
     *
     * @generated from field: double value = 1;
     */
    value = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.DOUBLE, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.DOUBLE, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.DoubleValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.DoubleValue";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new DoubleValue({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new DoubleValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DoubleValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DoubleValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DoubleValue, a, b);
    }
}
exports.DoubleValue = DoubleValue;
/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 *
 * @generated from message google.protobuf.FloatValue
 */
class FloatValue extends protobuf_1.Message {
    /**
     * The float value.
     *
     * @generated from field: float value = 1;
     */
    value = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.FLOAT, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.FLOAT, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.FloatValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.FloatValue";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new FloatValue({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new FloatValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FloatValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FloatValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FloatValue, a, b);
    }
}
exports.FloatValue = FloatValue;
/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 *
 * @generated from message google.protobuf.Int64Value
 */
class Int64Value extends protobuf_1.Message {
    /**
     * The int64 value.
     *
     * @generated from field: int64 value = 1;
     */
    value = protobuf_1.protoInt64.zero;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.INT64, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.INT64, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.Int64Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.Int64Value";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new Int64Value({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new Int64Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int64Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int64Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Int64Value, a, b);
    }
}
exports.Int64Value = Int64Value;
/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 *
 * @generated from message google.protobuf.UInt64Value
 */
class UInt64Value extends protobuf_1.Message {
    /**
     * The uint64 value.
     *
     * @generated from field: uint64 value = 1;
     */
    value = protobuf_1.protoInt64.zero;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.UINT64, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.UINT64, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.UInt64Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.UInt64Value";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new UInt64Value({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new UInt64Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UInt64Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UInt64Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UInt64Value, a, b);
    }
}
exports.UInt64Value = UInt64Value;
/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 *
 * @generated from message google.protobuf.Int32Value
 */
class Int32Value extends protobuf_1.Message {
    /**
     * The int32 value.
     *
     * @generated from field: int32 value = 1;
     */
    value = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.INT32, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.INT32, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.Int32Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.Int32Value";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new Int32Value({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new Int32Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int32Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int32Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Int32Value, a, b);
    }
}
exports.Int32Value = Int32Value;
/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 *
 * @generated from message google.protobuf.UInt32Value
 */
class UInt32Value extends protobuf_1.Message {
    /**
     * The uint32 value.
     *
     * @generated from field: uint32 value = 1;
     */
    value = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.UINT32, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.UINT32, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.UInt32Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.UInt32Value";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new UInt32Value({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new UInt32Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UInt32Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UInt32Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UInt32Value, a, b);
    }
}
exports.UInt32Value = UInt32Value;
/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 *
 * @generated from message google.protobuf.BoolValue
 */
class BoolValue extends protobuf_1.Message {
    /**
     * The bool value.
     *
     * @generated from field: bool value = 1;
     */
    value = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.BOOL, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.BOOL, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.BoolValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.BoolValue";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new BoolValue({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new BoolValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BoolValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BoolValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BoolValue, a, b);
    }
}
exports.BoolValue = BoolValue;
/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 *
 * @generated from message google.protobuf.StringValue
 */
class StringValue extends protobuf_1.Message {
    /**
     * The string value.
     *
     * @generated from field: string value = 1;
     */
    value = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.STRING, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.STRING, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.StringValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.StringValue";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new StringValue({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new StringValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StringValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StringValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StringValue, a, b);
    }
}
exports.StringValue = StringValue;
/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 *
 * @generated from message google.protobuf.BytesValue
 */
class BytesValue extends protobuf_1.Message {
    /**
     * The bytes value.
     *
     * @generated from field: bytes value = 1;
     */
    value = new Uint8Array(0);
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return protobuf_1.proto3.json.writeScalar(protobuf_1.ScalarType.BYTES, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = protobuf_1.proto3.json.readScalar(protobuf_1.ScalarType.BYTES, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.BytesValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static runtime = protobuf_1.proto3;
    static typeName = "google.protobuf.BytesValue";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fieldWrapper = {
        wrapField(value) {
            return new BytesValue({ value });
        },
        unwrapField(value) {
            return value.value;
        }
    };
    static fromBinary(bytes, options) {
        return new BytesValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BytesValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BytesValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BytesValue, a, b);
    }
}
exports.BytesValue = BytesValue;
