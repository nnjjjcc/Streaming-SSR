"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/api/v2/core/address.proto (package envoy.api.v2.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.CidrRange = exports.Address = exports.BindConfig = exports.TcpKeepalive = exports.SocketAddress_Protocol = exports.SocketAddress = exports.Pipe = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const wrappers_pb_1 = require("../../../../google/protobuf/wrappers_pb");
const socket_option_pb_1 = require("./socket_option_pb");
/**
 * @generated from message envoy.api.v2.core.Pipe
 */
class Pipe extends protobuf_1.Message {
    /**
     * Unix Domain Socket path. On Linux, paths starting with '@' will use the
     * abstract namespace. The starting '@' is replaced by a null byte by Envoy.
     * Paths starting with '@' will result in an error in environments other than
     * Linux.
     *
     * @generated from field: string path = 1;
     */
    path = "";
    /**
     * The mode for the Pipe. Not applicable for abstract sockets.
     *
     * @generated from field: uint32 mode = 2;
     */
    mode = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.Pipe";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "mode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Pipe().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Pipe().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Pipe().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Pipe, a, b);
    }
}
exports.Pipe = Pipe;
/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.core.SocketAddress
 */
class SocketAddress extends protobuf_1.Message {
    /**
     * @generated from field: envoy.api.v2.core.SocketAddress.Protocol protocol = 1;
     */
    protocol = SocketAddress_Protocol.TCP;
    /**
     * The address for this socket. :ref:`Listeners <config_listeners>` will bind
     * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
     * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
     * It is possible to distinguish a Listener address via the prefix/suffix matching
     * in :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>`.] When used
     * within an upstream :ref:`BindConfig <envoy_api_msg_core.BindConfig>`, the address
     * controls the source address of outbound connections. For :ref:`clusters
     * <envoy_api_msg_Cluster>`, the cluster type determines whether the
     * address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS
     * (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized
     * via :ref:`resolver_name <envoy_api_field_core.SocketAddress.resolver_name>`.
     *
     * @generated from field: string address = 2;
     */
    address = "";
    /**
     * @generated from oneof envoy.api.v2.core.SocketAddress.port_specifier
     */
    portSpecifier = { case: undefined };
    /**
     * The name of the custom resolver. This must have been registered with Envoy. If
     * this is empty, a context dependent default applies. If the address is a concrete
     * IP address, no resolution will occur. If address is a hostname this
     * should be set for resolution other than DNS. Specifying a custom resolver with
     * *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime.
     *
     * @generated from field: string resolver_name = 5;
     */
    resolverName = "";
    /**
     * When binding to an IPv6 address above, this enables `IPv4 compatibility
     * <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will
     * allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
     * IPv6 space as ``::FFFF:<IPv4-address>``.
     *
     * @generated from field: bool ipv4_compat = 6;
     */
    ipv4Compat = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.SocketAddress";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "protocol", kind: "enum", T: protobuf_1.proto3.getEnumType(SocketAddress_Protocol) },
        { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "port_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "port_specifier" },
        { no: 4, name: "named_port", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "port_specifier" },
        { no: 5, name: "resolver_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "ipv4_compat", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new SocketAddress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SocketAddress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SocketAddress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SocketAddress, a, b);
    }
}
exports.SocketAddress = SocketAddress;
/**
 * @generated from enum envoy.api.v2.core.SocketAddress.Protocol
 */
var SocketAddress_Protocol;
(function (SocketAddress_Protocol) {
    /**
     * @generated from enum value: TCP = 0;
     */
    SocketAddress_Protocol[SocketAddress_Protocol["TCP"] = 0] = "TCP";
    /**
     * @generated from enum value: UDP = 1;
     */
    SocketAddress_Protocol[SocketAddress_Protocol["UDP"] = 1] = "UDP";
})(SocketAddress_Protocol || (exports.SocketAddress_Protocol = SocketAddress_Protocol = {}));
// Retrieve enum metadata with: proto3.getEnumType(SocketAddress_Protocol)
protobuf_1.proto3.util.setEnumType(SocketAddress_Protocol, "envoy.api.v2.core.SocketAddress.Protocol", [
    { no: 0, name: "TCP" },
    { no: 1, name: "UDP" },
]);
/**
 * @generated from message envoy.api.v2.core.TcpKeepalive
 */
class TcpKeepalive extends protobuf_1.Message {
    /**
     * Maximum number of keepalive probes to send without response before deciding
     * the connection is dead. Default is to use the OS level configuration (unless
     * overridden, Linux defaults to 9.)
     *
     * @generated from field: google.protobuf.UInt32Value keepalive_probes = 1;
     */
    keepaliveProbes;
    /**
     * The number of seconds a connection needs to be idle before keep-alive probes
     * start being sent. Default is to use the OS level configuration (unless
     * overridden, Linux defaults to 7200s (i.e., 2 hours.)
     *
     * @generated from field: google.protobuf.UInt32Value keepalive_time = 2;
     */
    keepaliveTime;
    /**
     * The number of seconds between keep-alive probes. Default is to use the OS
     * level configuration (unless overridden, Linux defaults to 75s.)
     *
     * @generated from field: google.protobuf.UInt32Value keepalive_interval = 3;
     */
    keepaliveInterval;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.TcpKeepalive";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "keepalive_probes", kind: "message", T: wrappers_pb_1.UInt32Value },
        { no: 2, name: "keepalive_time", kind: "message", T: wrappers_pb_1.UInt32Value },
        { no: 3, name: "keepalive_interval", kind: "message", T: wrappers_pb_1.UInt32Value },
    ]);
    static fromBinary(bytes, options) {
        return new TcpKeepalive().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TcpKeepalive().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TcpKeepalive().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TcpKeepalive, a, b);
    }
}
exports.TcpKeepalive = TcpKeepalive;
/**
 * @generated from message envoy.api.v2.core.BindConfig
 */
class BindConfig extends protobuf_1.Message {
    /**
     * The address to bind to when creating a socket.
     *
     * @generated from field: envoy.api.v2.core.SocketAddress source_address = 1;
     */
    sourceAddress;
    /**
     * Whether to set the *IP_FREEBIND* option when creating the socket. When this
     * flag is set to true, allows the :ref:`source_address
     * <envoy_api_field_UpstreamBindConfig.source_address>` to be an IP address
     * that is not configured on the system running Envoy. When this flag is set
     * to false, the option *IP_FREEBIND* is disabled on the socket. When this
     * flag is not set (default), the socket is not modified, i.e. the option is
     * neither enabled nor disabled.
     *
     * @generated from field: google.protobuf.BoolValue freebind = 2;
     */
    freebind;
    /**
     * Additional socket options that may not be present in Envoy source code or
     * precompiled binaries.
     *
     * @generated from field: repeated envoy.api.v2.core.SocketOption socket_options = 3;
     */
    socketOptions = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.BindConfig";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "source_address", kind: "message", T: SocketAddress },
        { no: 2, name: "freebind", kind: "message", T: wrappers_pb_1.BoolValue },
        { no: 3, name: "socket_options", kind: "message", T: socket_option_pb_1.SocketOption, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new BindConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BindConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BindConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BindConfig, a, b);
    }
}
exports.BindConfig = BindConfig;
/**
 * Addresses specify either a logical or physical address and port, which are
 * used to tell Envoy where to bind/listen, connect to upstream and find
 * management servers.
 *
 * @generated from message envoy.api.v2.core.Address
 */
class Address extends protobuf_1.Message {
    /**
     * @generated from oneof envoy.api.v2.core.Address.address
     */
    address = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.Address";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "socket_address", kind: "message", T: SocketAddress, oneof: "address" },
        { no: 2, name: "pipe", kind: "message", T: Pipe, oneof: "address" },
    ]);
    static fromBinary(bytes, options) {
        return new Address().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Address().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Address().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Address, a, b);
    }
}
exports.Address = Address;
/**
 * CidrRange specifies an IP Address and a prefix length to construct
 * the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
 *
 * @generated from message envoy.api.v2.core.CidrRange
 */
class CidrRange extends protobuf_1.Message {
    /**
     * IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``.
     *
     * @generated from field: string address_prefix = 1;
     */
    addressPrefix = "";
    /**
     * Length of prefix, e.g. 0, 32. Defaults to 0 when unset.
     *
     * @generated from field: google.protobuf.UInt32Value prefix_len = 2;
     */
    prefixLen;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.CidrRange";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "address_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "prefix_len", kind: "message", T: wrappers_pb_1.UInt32Value },
    ]);
    static fromBinary(bytes, options) {
        return new CidrRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CidrRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CidrRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CidrRange, a, b);
    }
}
exports.CidrRange = CidrRange;
