import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Duration } from "../../../../google/protobuf/duration_pb";
/**
 * Envoy external URI descriptor
 *
 * @generated from message envoy.api.v2.core.HttpUri
 */
export declare class HttpUri extends Message<HttpUri> {
    /**
     * The HTTP server URI. It should be a full FQDN with protocol, host and path.
     *
     * Example:
     *
     * .. code-block:: yaml
     *
     *    uri: https://www.googleapis.com/oauth2/v1/certs
     *
     *
     * @generated from field: string uri = 1;
     */
    uri: string;
    /**
     * Specify how `uri` is to be fetched. Today, this requires an explicit
     * cluster, but in the future we may support dynamic cluster creation or
     * inline DNS resolution. See `issue
     * <https://github.com/envoyproxy/envoy/issues/1606>`_.
     *
     * @generated from oneof envoy.api.v2.core.HttpUri.http_upstream_type
     */
    httpUpstreamType: {
        /**
         * A cluster is created in the Envoy "cluster_manager" config
         * section. This field specifies the cluster name.
         *
         * Example:
         *
         * .. code-block:: yaml
         *
         *    cluster: jwks_cluster
         *
         *
         * @generated from field: string cluster = 2;
         */
        value: string;
        case: "cluster";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Sets the maximum duration in milliseconds that a response can take to arrive upon request.
     *
     * @generated from field: google.protobuf.Duration timeout = 3;
     */
    timeout?: Duration;
    constructor(data?: PartialMessage<HttpUri>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HttpUri";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpUri;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpUri;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpUri;
    static equals(a: HttpUri | PlainMessage<HttpUri> | undefined, b: HttpUri | PlainMessage<HttpUri> | undefined): boolean;
}
