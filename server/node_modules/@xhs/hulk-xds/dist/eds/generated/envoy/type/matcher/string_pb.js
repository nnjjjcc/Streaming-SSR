"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/type/matcher/string.proto (package envoy.type.matcher, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListStringMatcher = exports.StringMatcher = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const regex_pb_1 = require("./regex_pb");
/**
 * Specifies the way to match a string.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.type.matcher.StringMatcher
 */
class StringMatcher extends protobuf_1.Message {
    /**
     * @generated from oneof envoy.type.matcher.StringMatcher.match_pattern
     */
    matchPattern = { case: undefined };
    /**
     * If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
     * effect for the safe_regex match.
     * For example, the matcher *data* will match both input string *Data* and *data* if set to true.
     *
     * @generated from field: bool ignore_case = 6;
     */
    ignoreCase = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.matcher.StringMatcher";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "exact", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
        { no: 2, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
        { no: 3, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
        { no: 4, name: "regex", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "match_pattern" },
        { no: 5, name: "safe_regex", kind: "message", T: regex_pb_1.RegexMatcher, oneof: "match_pattern" },
        { no: 6, name: "ignore_case", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new StringMatcher().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StringMatcher().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StringMatcher().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StringMatcher, a, b);
    }
}
exports.StringMatcher = StringMatcher;
/**
 * Specifies a list of ways to match a string.
 *
 * @generated from message envoy.type.matcher.ListStringMatcher
 */
class ListStringMatcher extends protobuf_1.Message {
    /**
     * @generated from field: repeated envoy.type.matcher.StringMatcher patterns = 1;
     */
    patterns = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.matcher.ListStringMatcher";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "patterns", kind: "message", T: StringMatcher, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new ListStringMatcher().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListStringMatcher().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListStringMatcher().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListStringMatcher, a, b);
    }
}
exports.ListStringMatcher = ListStringMatcher;
