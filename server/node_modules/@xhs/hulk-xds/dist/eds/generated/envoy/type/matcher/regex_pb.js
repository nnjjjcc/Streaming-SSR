"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/type/matcher/regex.proto (package envoy.type.matcher, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegexMatchAndSubstitute = exports.RegexMatcher_GoogleRE2 = exports.RegexMatcher = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const wrappers_pb_1 = require("../../../google/protobuf/wrappers_pb");
/**
 * A regex matcher designed for safety when used with untrusted input.
 *
 * @generated from message envoy.type.matcher.RegexMatcher
 */
class RegexMatcher extends protobuf_1.Message {
    /**
     * @generated from oneof envoy.type.matcher.RegexMatcher.engine_type
     */
    engineType = { case: undefined };
    /**
     * The regex match string. The string must be supported by the configured engine.
     *
     * @generated from field: string regex = 2;
     */
    regex = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.matcher.RegexMatcher";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "google_re2", kind: "message", T: RegexMatcher_GoogleRE2, oneof: "engine_type" },
        { no: 2, name: "regex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new RegexMatcher().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegexMatcher().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegexMatcher().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegexMatcher, a, b);
    }
}
exports.RegexMatcher = RegexMatcher;
/**
 * Google's `RE2 <https://github.com/google/re2>`_ regex engine. The regex string must adhere to
 * the documented `syntax <https://github.com/google/re2/wiki/Syntax>`_. The engine is designed
 * to complete execution in linear time as well as limit the amount of memory used.
 *
 * Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level``
 * and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or
 * complexity that a compiled regex can have before an exception is thrown or a warning is
 * logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and
 * ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning).
 *
 * Envoy emits two stats for tracking the program size of regexes: the histogram `re2.program_size`,
 * which records the program size, and the counter `re2.exceeded_warn_level`, which is incremented
 * each time the program size exceeds the warn level threshold.
 *
 * @generated from message envoy.type.matcher.RegexMatcher.GoogleRE2
 */
class RegexMatcher_GoogleRE2 extends protobuf_1.Message {
    /**
     * This field controls the RE2 "program size" which is a rough estimate of how complex a
     * compiled regex is to evaluate. A regex that has a program size greater than the configured
     * value will fail to compile. In this case, the configured max program size can be increased
     * or the regex can be simplified. If not specified, the default is 100.
     *
     * This field is deprecated; regexp validation should be performed on the management server
     * instead of being done by each individual client.
     *
     * @generated from field: google.protobuf.UInt32Value max_program_size = 1 [deprecated = true];
     * @deprecated
     */
    maxProgramSize;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.matcher.RegexMatcher.GoogleRE2";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "max_program_size", kind: "message", T: wrappers_pb_1.UInt32Value },
    ]);
    static fromBinary(bytes, options) {
        return new RegexMatcher_GoogleRE2().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegexMatcher_GoogleRE2().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegexMatcher_GoogleRE2().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegexMatcher_GoogleRE2, a, b);
    }
}
exports.RegexMatcher_GoogleRE2 = RegexMatcher_GoogleRE2;
/**
 * Describes how to match a string and then produce a new string using a regular
 * expression and a substitution string.
 *
 * @generated from message envoy.type.matcher.RegexMatchAndSubstitute
 */
class RegexMatchAndSubstitute extends protobuf_1.Message {
    /**
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     *
     * @generated from field: envoy.type.matcher.RegexMatcher pattern = 1;
     */
    pattern;
    /**
     * The string that should be substituted into matching portions of the
     * subject string during a substitution operation to produce a new string.
     * Capture groups in the pattern can be referenced in the substitution
     * string. Note, however, that the syntax for referring to capture groups is
     * defined by the chosen regular expression engine. Google's `RE2
     * <https://github.com/google/re2>`_ regular expression engine uses a
     * backslash followed by the capture group number to denote a numbered
     * capture group. E.g., ``\1`` refers to capture group 1, and ``\2`` refers
     * to capture group 2.
     *
     * @generated from field: string substitution = 2;
     */
    substitution = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.matcher.RegexMatchAndSubstitute";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "pattern", kind: "message", T: RegexMatcher },
        { no: 2, name: "substitution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new RegexMatchAndSubstitute().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegexMatchAndSubstitute().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegexMatchAndSubstitute().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegexMatchAndSubstitute, a, b);
    }
}
exports.RegexMatchAndSubstitute = RegexMatchAndSubstitute;
