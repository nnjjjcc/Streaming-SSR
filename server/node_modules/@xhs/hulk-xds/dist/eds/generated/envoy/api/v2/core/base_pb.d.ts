import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SemanticVersion } from "../../../type/semantic_version_pb";
import { Struct } from "../../../../google/protobuf/struct_pb";
import { Address } from "./address_pb";
import { BackoffStrategy } from "./backoff_pb";
import { HttpUri } from "./http_uri_pb";
import { Any } from "../../../../google/protobuf/any_pb";
import { FractionalPercent } from "../../../type/percent_pb";
/**
 * Envoy supports :ref:`upstream priority routing
 * <arch_overview_http_routing_priority>` both at the route and the virtual
 * cluster level. The current priority implementation uses different connection
 * pool and circuit breaking settings for each priority level. This means that
 * even for HTTP/2 requests, two physical connections will be used to an
 * upstream host. In the future Envoy will likely support true HTTP/2 priority
 * over a single upstream connection.
 *
 * @generated from enum envoy.api.v2.core.RoutingPriority
 */
export declare enum RoutingPriority {
    /**
     * @generated from enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * @generated from enum value: HIGH = 1;
     */
    HIGH = 1
}
/**
 * HTTP request method.
 *
 * @generated from enum envoy.api.v2.core.RequestMethod
 */
export declare enum RequestMethod {
    /**
     * @generated from enum value: METHOD_UNSPECIFIED = 0;
     */
    METHOD_UNSPECIFIED = 0,
    /**
     * @generated from enum value: GET = 1;
     */
    GET = 1,
    /**
     * @generated from enum value: HEAD = 2;
     */
    HEAD = 2,
    /**
     * @generated from enum value: POST = 3;
     */
    POST = 3,
    /**
     * @generated from enum value: PUT = 4;
     */
    PUT = 4,
    /**
     * @generated from enum value: DELETE = 5;
     */
    DELETE = 5,
    /**
     * @generated from enum value: CONNECT = 6;
     */
    CONNECT = 6,
    /**
     * @generated from enum value: OPTIONS = 7;
     */
    OPTIONS = 7,
    /**
     * @generated from enum value: TRACE = 8;
     */
    TRACE = 8,
    /**
     * @generated from enum value: PATCH = 9;
     */
    PATCH = 9
}
/**
 * Identifies the direction of the traffic relative to the local Envoy.
 *
 * @generated from enum envoy.api.v2.core.TrafficDirection
 */
export declare enum TrafficDirection {
    /**
     * Default option is unspecified.
     *
     * @generated from enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The transport is used for incoming traffic.
     *
     * @generated from enum value: INBOUND = 1;
     */
    INBOUND = 1,
    /**
     * The transport is used for outgoing traffic.
     *
     * @generated from enum value: OUTBOUND = 2;
     */
    OUTBOUND = 2
}
/**
 * Identifies location of where either Envoy runs or where upstream hosts run.
 *
 * @generated from message envoy.api.v2.core.Locality
 */
export declare class Locality extends Message<Locality> {
    /**
     * Region this :ref:`zone <envoy_api_field_core.Locality.zone>` belongs to.
     *
     * @generated from field: string region = 1;
     */
    region: string;
    /**
     * Defines the local service zone where Envoy is running. Though optional, it
     * should be set if discovery service routing is used and the discovery
     * service exposes :ref:`zone data <envoy_api_field_endpoint.LocalityLbEndpoints.locality>`,
     * either in this message or via :option:`--service-zone`. The meaning of zone
     * is context dependent, e.g. `Availability Zone (AZ)
     * <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
     * on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
     * GCP, etc.
     *
     * @generated from field: string zone = 2;
     */
    zone: string;
    /**
     * When used for locality of upstream hosts, this field further splits zone
     * into smaller chunks of sub-zones so they can be load balanced
     * independently.
     *
     * @generated from field: string sub_zone = 3;
     */
    subZone: string;
    constructor(data?: PartialMessage<Locality>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.Locality";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Locality;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Locality;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Locality;
    static equals(a: Locality | PlainMessage<Locality> | undefined, b: Locality | PlainMessage<Locality> | undefined): boolean;
}
/**
 * BuildVersion combines SemVer version of extension with free-form build information
 * (i.e. 'alpha', 'private-build') as a set of strings.
 *
 * @generated from message envoy.api.v2.core.BuildVersion
 */
export declare class BuildVersion extends Message<BuildVersion> {
    /**
     * SemVer version of extension.
     *
     * @generated from field: envoy.type.SemanticVersion version = 1;
     */
    version?: SemanticVersion;
    /**
     * Free-form build information.
     * Envoy defines several well known keys in the source/common/version/version.h file
     *
     * @generated from field: google.protobuf.Struct metadata = 2;
     */
    metadata?: Struct;
    constructor(data?: PartialMessage<BuildVersion>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.BuildVersion";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildVersion;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildVersion;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildVersion;
    static equals(a: BuildVersion | PlainMessage<BuildVersion> | undefined, b: BuildVersion | PlainMessage<BuildVersion> | undefined): boolean;
}
/**
 * Version and identification for an Envoy extension.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.api.v2.core.Extension
 */
export declare class Extension extends Message<Extension> {
    /**
     * This is the name of the Envoy filter as specified in the Envoy
     * configuration, e.g. envoy.filters.http.router, com.acme.widget.
     *
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * Category of the extension.
     * Extension category names use reverse DNS notation. For instance "envoy.filters.listener"
     * for Envoy's built-in listener filters or "com.acme.filters.http" for HTTP filters from
     * acme.com vendor.
     * [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]
     *
     * @generated from field: string category = 2;
     */
    category: string;
    /**
     * [#not-implemented-hide:] Type descriptor of extension configuration proto.
     * [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]
     * [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]
     *
     * @generated from field: string type_descriptor = 3;
     */
    typeDescriptor: string;
    /**
     * The version is a property of the extension and maintained independently
     * of other extensions and the Envoy API.
     * This field is not set when extension did not provide version information.
     *
     * @generated from field: envoy.api.v2.core.BuildVersion version = 4;
     */
    version?: BuildVersion;
    /**
     * Indicates that the extension is present but was disabled via dynamic configuration.
     *
     * @generated from field: bool disabled = 5;
     */
    disabled: boolean;
    constructor(data?: PartialMessage<Extension>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.Extension";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Extension;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Extension;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Extension;
    static equals(a: Extension | PlainMessage<Extension> | undefined, b: Extension | PlainMessage<Extension> | undefined): boolean;
}
/**
 * Identifies a specific Envoy instance. The node identifier is presented to the
 * management server, which may use this identifier to distinguish per Envoy
 * configuration for serving.
 * [#next-free-field: 12]
 *
 * @generated from message envoy.api.v2.core.Node
 */
export declare class Node extends Message<Node> {
    /**
     * An opaque node identifier for the Envoy node. This also provides the local
     * service node name. It should be set if any of the following features are
     * used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS
     * <config_cluster_manager_cds>`, and :ref:`HTTP tracing
     * <arch_overview_tracing>`, either in this message or via
     * :option:`--service-node`.
     *
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * Defines the local service cluster name where Envoy is running. Though
     * optional, it should be set if any of the following features are used:
     * :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster
     * verification
     * <envoy_api_field_core.HealthCheck.HttpHealthCheck.service_name_matcher>`,
     * :ref:`runtime override directory <envoy_api_msg_config.bootstrap.v2.Runtime>`,
     * :ref:`user agent addition
     * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.add_user_agent>`,
     * :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,
     * :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing
     * <arch_overview_tracing>`, either in this message or via
     * :option:`--service-cluster`.
     *
     * @generated from field: string cluster = 2;
     */
    cluster: string;
    /**
     * Opaque metadata extending the node identifier. Envoy will pass this
     * directly to the management server.
     *
     * @generated from field: google.protobuf.Struct metadata = 3;
     */
    metadata?: Struct;
    /**
     * Locality specifying where the Envoy instance is running.
     *
     * @generated from field: envoy.api.v2.core.Locality locality = 4;
     */
    locality?: Locality;
    /**
     * This is motivated by informing a management server during canary which
     * version of Envoy is being tested in a heterogeneous fleet. This will be set
     * by Envoy in management server RPCs.
     * This field is deprecated in favor of the user_agent_name and user_agent_version values.
     *
     * @generated from field: string build_version = 5 [deprecated = true];
     * @deprecated
     */
    buildVersion: string;
    /**
     * Free-form string that identifies the entity requesting config.
     * E.g. "envoy" or "grpc"
     *
     * @generated from field: string user_agent_name = 6;
     */
    userAgentName: string;
    /**
     * @generated from oneof envoy.api.v2.core.Node.user_agent_version_type
     */
    userAgentVersionType: {
        /**
         * Free-form string that identifies the version of the entity requesting config.
         * E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
         *
         * @generated from field: string user_agent_version = 7;
         */
        value: string;
        case: "userAgentVersion";
    } | {
        /**
         * Structured version of the entity requesting config.
         *
         * @generated from field: envoy.api.v2.core.BuildVersion user_agent_build_version = 8;
         */
        value: BuildVersion;
        case: "userAgentBuildVersion";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * List of extensions and their versions supported by the node.
     *
     * @generated from field: repeated envoy.api.v2.core.Extension extensions = 9;
     */
    extensions: Extension[];
    /**
     * Client feature support list. These are well known features described
     * in the Envoy API repository for a given major version of an API. Client features
     * use reverse DNS naming scheme, for example `com.acme.feature`.
     * See :ref:`the list of features <client_features>` that xDS client may
     * support.
     *
     * @generated from field: repeated string client_features = 10;
     */
    clientFeatures: string[];
    /**
     * Known listening ports on the node as a generic hint to the management server
     * for filtering :ref:`listeners <config_listeners>` to be returned. For example,
     * if there is a listener bound to port 80, the list can optionally contain the
     * SocketAddress `(0.0.0.0,80)`. The field is optional and just a hint.
     *
     * @generated from field: repeated envoy.api.v2.core.Address listening_addresses = 11;
     */
    listeningAddresses: Address[];
    constructor(data?: PartialMessage<Node>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.Node";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node;
    static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean;
}
/**
 * Metadata provides additional inputs to filters based on matched listeners,
 * filter chains, routes and endpoints. It is structured as a map, usually from
 * filter name (in reverse DNS format) to metadata specific to the filter. Metadata
 * key-values for a filter are merged as connection and request handling occurs,
 * with later values for the same key overriding earlier values.
 *
 * An example use of metadata is providing additional values to
 * http_connection_manager in the envoy.http_connection_manager.access_log
 * namespace.
 *
 * Another example use of metadata is to per service config info in cluster metadata, which may get
 * consumed by multiple filters.
 *
 * For load balancing, Metadata provides a means to subset cluster endpoints.
 * Endpoints have a Metadata object associated and routes contain a Metadata
 * object to match against. There are some well defined metadata used today for
 * this purpose:
 *
 * * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
 *   endpoint and is also used during header processing
 *   (x-envoy-upstream-canary) and for stats purposes.
 * [#next-major-version: move to type/metadata/v2]
 *
 * @generated from message envoy.api.v2.core.Metadata
 */
export declare class Metadata extends Message<Metadata> {
    /**
     * Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
     * namespace is reserved for Envoy's built-in filters.
     *
     * @generated from field: map<string, google.protobuf.Struct> filter_metadata = 1;
     */
    filterMetadata: {
        [key: string]: Struct;
    };
    constructor(data?: PartialMessage<Metadata>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.Metadata";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata;
    static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean;
}
/**
 * Runtime derived uint32 with a default when not specified.
 *
 * @generated from message envoy.api.v2.core.RuntimeUInt32
 */
export declare class RuntimeUInt32 extends Message<RuntimeUInt32> {
    /**
     * Default value if runtime value is not available.
     *
     * @generated from field: uint32 default_value = 2;
     */
    defaultValue: number;
    /**
     * Runtime key to get value for comparison. This value is used if defined.
     *
     * @generated from field: string runtime_key = 3;
     */
    runtimeKey: string;
    constructor(data?: PartialMessage<RuntimeUInt32>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.RuntimeUInt32";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeUInt32;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeUInt32;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeUInt32;
    static equals(a: RuntimeUInt32 | PlainMessage<RuntimeUInt32> | undefined, b: RuntimeUInt32 | PlainMessage<RuntimeUInt32> | undefined): boolean;
}
/**
 * Runtime derived double with a default when not specified.
 *
 * @generated from message envoy.api.v2.core.RuntimeDouble
 */
export declare class RuntimeDouble extends Message<RuntimeDouble> {
    /**
     * Default value if runtime value is not available.
     *
     * @generated from field: double default_value = 1;
     */
    defaultValue: number;
    /**
     * Runtime key to get value for comparison. This value is used if defined.
     *
     * @generated from field: string runtime_key = 2;
     */
    runtimeKey: string;
    constructor(data?: PartialMessage<RuntimeDouble>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.RuntimeDouble";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeDouble;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeDouble;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeDouble;
    static equals(a: RuntimeDouble | PlainMessage<RuntimeDouble> | undefined, b: RuntimeDouble | PlainMessage<RuntimeDouble> | undefined): boolean;
}
/**
 * Runtime derived bool with a default when not specified.
 *
 * @generated from message envoy.api.v2.core.RuntimeFeatureFlag
 */
export declare class RuntimeFeatureFlag extends Message<RuntimeFeatureFlag> {
    /**
     * Default value if runtime value is not available.
     *
     * @generated from field: google.protobuf.BoolValue default_value = 1;
     */
    defaultValue?: boolean;
    /**
     * Runtime key to get value for comparison. This value is used if defined. The boolean value must
     * be represented via its
     * `canonical JSON encoding <https://developers.google.com/protocol-buffers/docs/proto3#json>`_.
     *
     * @generated from field: string runtime_key = 2;
     */
    runtimeKey: string;
    constructor(data?: PartialMessage<RuntimeFeatureFlag>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.RuntimeFeatureFlag";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeFeatureFlag;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeFeatureFlag;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeFeatureFlag;
    static equals(a: RuntimeFeatureFlag | PlainMessage<RuntimeFeatureFlag> | undefined, b: RuntimeFeatureFlag | PlainMessage<RuntimeFeatureFlag> | undefined): boolean;
}
/**
 * Header name/value pair.
 *
 * @generated from message envoy.api.v2.core.HeaderValue
 */
export declare class HeaderValue extends Message<HeaderValue> {
    /**
     * Header name.
     *
     * @generated from field: string key = 1;
     */
    key: string;
    /**
     * Header value.
     *
     * The same :ref:`format specifier <config_access_log_format>` as used for
     * :ref:`HTTP access logging <config_access_log>` applies here, however
     * unknown header values are replaced with the empty string instead of `-`.
     *
     * @generated from field: string value = 2;
     */
    value: string;
    constructor(data?: PartialMessage<HeaderValue>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HeaderValue";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderValue;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderValue;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderValue;
    static equals(a: HeaderValue | PlainMessage<HeaderValue> | undefined, b: HeaderValue | PlainMessage<HeaderValue> | undefined): boolean;
}
/**
 * Header name/value pair plus option to control append behavior.
 *
 * @generated from message envoy.api.v2.core.HeaderValueOption
 */
export declare class HeaderValueOption extends Message<HeaderValueOption> {
    /**
     * Header name/value pair that this option applies to.
     *
     * @generated from field: envoy.api.v2.core.HeaderValue header = 1;
     */
    header?: HeaderValue;
    /**
     * Should the value be appended? If true (default), the value is appended to
     * existing values.
     *
     * @generated from field: google.protobuf.BoolValue append = 2;
     */
    append?: boolean;
    constructor(data?: PartialMessage<HeaderValueOption>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HeaderValueOption";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderValueOption;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderValueOption;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderValueOption;
    static equals(a: HeaderValueOption | PlainMessage<HeaderValueOption> | undefined, b: HeaderValueOption | PlainMessage<HeaderValueOption> | undefined): boolean;
}
/**
 * Wrapper for a set of headers.
 *
 * @generated from message envoy.api.v2.core.HeaderMap
 */
export declare class HeaderMap extends Message<HeaderMap> {
    /**
     * @generated from field: repeated envoy.api.v2.core.HeaderValue headers = 1;
     */
    headers: HeaderValue[];
    constructor(data?: PartialMessage<HeaderMap>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HeaderMap";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderMap;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderMap;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderMap;
    static equals(a: HeaderMap | PlainMessage<HeaderMap> | undefined, b: HeaderMap | PlainMessage<HeaderMap> | undefined): boolean;
}
/**
 * Data source consisting of either a file or an inline value.
 *
 * @generated from message envoy.api.v2.core.DataSource
 */
export declare class DataSource extends Message<DataSource> {
    /**
     * @generated from oneof envoy.api.v2.core.DataSource.specifier
     */
    specifier: {
        /**
         * Local filesystem data source.
         *
         * @generated from field: string filename = 1;
         */
        value: string;
        case: "filename";
    } | {
        /**
         * Bytes inlined in the configuration.
         *
         * @generated from field: bytes inline_bytes = 2;
         */
        value: Uint8Array;
        case: "inlineBytes";
    } | {
        /**
         * String inlined in the configuration.
         *
         * @generated from field: string inline_string = 3;
         */
        value: string;
        case: "inlineString";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<DataSource>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.DataSource";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataSource;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataSource;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataSource;
    static equals(a: DataSource | PlainMessage<DataSource> | undefined, b: DataSource | PlainMessage<DataSource> | undefined): boolean;
}
/**
 * The message specifies the retry policy of remote data source when fetching fails.
 *
 * @generated from message envoy.api.v2.core.RetryPolicy
 */
export declare class RetryPolicy extends Message<RetryPolicy> {
    /**
     * Specifies parameters that control :ref:`retry backoff strategy <envoy_api_msg_core.BackoffStrategy>`.
     * This parameter is optional, in which case the default base interval is 1000 milliseconds. The
     * default maximum interval is 10 times the base interval.
     *
     * @generated from field: envoy.api.v2.core.BackoffStrategy retry_back_off = 1;
     */
    retryBackOff?: BackoffStrategy;
    /**
     * Specifies the allowed number of retries. This parameter is optional and
     * defaults to 1.
     *
     * @generated from field: google.protobuf.UInt32Value num_retries = 2;
     */
    numRetries?: number;
    constructor(data?: PartialMessage<RetryPolicy>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.RetryPolicy";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetryPolicy;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetryPolicy;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetryPolicy;
    static equals(a: RetryPolicy | PlainMessage<RetryPolicy> | undefined, b: RetryPolicy | PlainMessage<RetryPolicy> | undefined): boolean;
}
/**
 * The message specifies how to fetch data from remote and how to verify it.
 *
 * @generated from message envoy.api.v2.core.RemoteDataSource
 */
export declare class RemoteDataSource extends Message<RemoteDataSource> {
    /**
     * The HTTP URI to fetch the remote data.
     *
     * @generated from field: envoy.api.v2.core.HttpUri http_uri = 1;
     */
    httpUri?: HttpUri;
    /**
     * SHA256 string for verifying data.
     *
     * @generated from field: string sha256 = 2;
     */
    sha256: string;
    /**
     * Retry policy for fetching remote data.
     *
     * @generated from field: envoy.api.v2.core.RetryPolicy retry_policy = 3;
     */
    retryPolicy?: RetryPolicy;
    constructor(data?: PartialMessage<RemoteDataSource>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.RemoteDataSource";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteDataSource;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteDataSource;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteDataSource;
    static equals(a: RemoteDataSource | PlainMessage<RemoteDataSource> | undefined, b: RemoteDataSource | PlainMessage<RemoteDataSource> | undefined): boolean;
}
/**
 * Async data source which support async data fetch.
 *
 * @generated from message envoy.api.v2.core.AsyncDataSource
 */
export declare class AsyncDataSource extends Message<AsyncDataSource> {
    /**
     * @generated from oneof envoy.api.v2.core.AsyncDataSource.specifier
     */
    specifier: {
        /**
         * Local async data source.
         *
         * @generated from field: envoy.api.v2.core.DataSource local = 1;
         */
        value: DataSource;
        case: "local";
    } | {
        /**
         * Remote async data source.
         *
         * @generated from field: envoy.api.v2.core.RemoteDataSource remote = 2;
         */
        value: RemoteDataSource;
        case: "remote";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AsyncDataSource>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.AsyncDataSource";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AsyncDataSource;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AsyncDataSource;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AsyncDataSource;
    static equals(a: AsyncDataSource | PlainMessage<AsyncDataSource> | undefined, b: AsyncDataSource | PlainMessage<AsyncDataSource> | undefined): boolean;
}
/**
 * Configuration for transport socket in :ref:`listeners <config_listeners>` and
 * :ref:`clusters <envoy_api_msg_Cluster>`. If the configuration is
 * empty, a default transport socket implementation and configuration will be
 * chosen based on the platform and existence of tls_context.
 *
 * @generated from message envoy.api.v2.core.TransportSocket
 */
export declare class TransportSocket extends Message<TransportSocket> {
    /**
     * The name of the transport socket to instantiate. The name must match a supported transport
     * socket implementation.
     *
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * Implementation specific configuration which depends on the implementation being instantiated.
     * See the supported transport socket implementations for further documentation.
     *
     * @generated from oneof envoy.api.v2.core.TransportSocket.config_type
     */
    configType: {
        /**
         * @generated from field: google.protobuf.Struct config = 2 [deprecated = true];
         * @deprecated
         */
        value: Struct;
        case: "config";
    } | {
        /**
         * @generated from field: google.protobuf.Any typed_config = 3;
         */
        value: Any;
        case: "typedConfig";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<TransportSocket>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.TransportSocket";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransportSocket;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransportSocket;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransportSocket;
    static equals(a: TransportSocket | PlainMessage<TransportSocket> | undefined, b: TransportSocket | PlainMessage<TransportSocket> | undefined): boolean;
}
/**
 * Runtime derived FractionalPercent with defaults for when the numerator or denominator is not
 * specified via a runtime key.
 *
 * .. note::
 *
 *   Parsing of the runtime key's data is implemented such that it may be represented as a
 *   :ref:`FractionalPercent <envoy_api_msg_type.FractionalPercent>` proto represented as JSON/YAML
 *   and may also be represented as an integer with the assumption that the value is an integral
 *   percentage out of 100. For instance, a runtime key lookup returning the value "42" would parse
 *   as a `FractionalPercent` whose numerator is 42 and denominator is HUNDRED.
 *
 * @generated from message envoy.api.v2.core.RuntimeFractionalPercent
 */
export declare class RuntimeFractionalPercent extends Message<RuntimeFractionalPercent> {
    /**
     * Default value if the runtime value's for the numerator/denominator keys are not available.
     *
     * @generated from field: envoy.type.FractionalPercent default_value = 1;
     */
    defaultValue?: FractionalPercent;
    /**
     * Runtime key for a YAML representation of a FractionalPercent.
     *
     * @generated from field: string runtime_key = 2;
     */
    runtimeKey: string;
    constructor(data?: PartialMessage<RuntimeFractionalPercent>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.RuntimeFractionalPercent";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeFractionalPercent;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeFractionalPercent;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeFractionalPercent;
    static equals(a: RuntimeFractionalPercent | PlainMessage<RuntimeFractionalPercent> | undefined, b: RuntimeFractionalPercent | PlainMessage<RuntimeFractionalPercent> | undefined): boolean;
}
/**
 * Identifies a specific ControlPlane instance that Envoy is connected to.
 *
 * @generated from message envoy.api.v2.core.ControlPlane
 */
export declare class ControlPlane extends Message<ControlPlane> {
    /**
     * An opaque control plane identifier that uniquely identifies an instance
     * of control plane. This can be used to identify which control plane instance,
     * the Envoy is connected to.
     *
     * @generated from field: string identifier = 1;
     */
    identifier: string;
    constructor(data?: PartialMessage<ControlPlane>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.ControlPlane";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControlPlane;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControlPlane;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControlPlane;
    static equals(a: ControlPlane | PlainMessage<ControlPlane> | undefined, b: ControlPlane | PlainMessage<ControlPlane> | undefined): boolean;
}
