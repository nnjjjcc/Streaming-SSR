"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/type/semantic_version.proto (package envoy.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemanticVersion = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * Envoy uses SemVer (https://semver.org/). Major/minor versions indicate
 * expected behaviors and APIs, the patch version field is used only
 * for security fixes and can be generally ignored.
 *
 * @generated from message envoy.type.SemanticVersion
 */
class SemanticVersion extends protobuf_1.Message {
    /**
     * @generated from field: uint32 major_number = 1;
     */
    majorNumber = 0;
    /**
     * @generated from field: uint32 minor_number = 2;
     */
    minorNumber = 0;
    /**
     * @generated from field: uint32 patch = 3;
     */
    patch = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.SemanticVersion";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "major_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 2, name: "minor_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 3, name: "patch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    ]);
    static fromBinary(bytes, options) {
        return new SemanticVersion().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SemanticVersion().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SemanticVersion().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SemanticVersion, a, b);
    }
}
exports.SemanticVersion = SemanticVersion;
