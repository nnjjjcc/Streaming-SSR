import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { RegexMatcher } from "./regex_pb";
/**
 * Specifies the way to match a string.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.type.matcher.StringMatcher
 */
export declare class StringMatcher extends Message<StringMatcher> {
    /**
     * @generated from oneof envoy.type.matcher.StringMatcher.match_pattern
     */
    matchPattern: {
        /**
         * The input string must match exactly the string specified here.
         *
         * Examples:
         *
         * * *abc* only matches the value *abc*.
         *
         * @generated from field: string exact = 1;
         */
        value: string;
        case: "exact";
    } | {
        /**
         * The input string must have the prefix specified here.
         * Note: empty prefix is not allowed, please use regex instead.
         *
         * Examples:
         *
         * * *abc* matches the value *abc.xyz*
         *
         * @generated from field: string prefix = 2;
         */
        value: string;
        case: "prefix";
    } | {
        /**
         * The input string must have the suffix specified here.
         * Note: empty prefix is not allowed, please use regex instead.
         *
         * Examples:
         *
         * * *abc* matches the value *xyz.abc*
         *
         * @generated from field: string suffix = 3;
         */
        value: string;
        case: "suffix";
    } | {
        /**
         * The input string must match the regular expression specified here.
         * The regex grammar is defined `here
         * <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.
         *
         * Examples:
         *
         * * The regex ``\d{3}`` matches the value *123*
         * * The regex ``\d{3}`` does not match the value *1234*
         * * The regex ``\d{3}`` does not match the value *123.456*
         *
         * .. attention::
         *   This field has been deprecated in favor of `safe_regex` as it is not safe for use with
         *   untrusted input in all cases.
         *
         * @generated from field: string regex = 4 [deprecated = true];
         * @deprecated
         */
        value: string;
        case: "regex";
    } | {
        /**
         * The input string must match the regular expression specified here.
         *
         * @generated from field: envoy.type.matcher.RegexMatcher safe_regex = 5;
         */
        value: RegexMatcher;
        case: "safeRegex";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
     * effect for the safe_regex match.
     * For example, the matcher *data* will match both input string *Data* and *data* if set to true.
     *
     * @generated from field: bool ignore_case = 6;
     */
    ignoreCase: boolean;
    constructor(data?: PartialMessage<StringMatcher>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.type.matcher.StringMatcher";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringMatcher;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringMatcher;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringMatcher;
    static equals(a: StringMatcher | PlainMessage<StringMatcher> | undefined, b: StringMatcher | PlainMessage<StringMatcher> | undefined): boolean;
}
/**
 * Specifies a list of ways to match a string.
 *
 * @generated from message envoy.type.matcher.ListStringMatcher
 */
export declare class ListStringMatcher extends Message<ListStringMatcher> {
    /**
     * @generated from field: repeated envoy.type.matcher.StringMatcher patterns = 1;
     */
    patterns: StringMatcher[];
    constructor(data?: PartialMessage<ListStringMatcher>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.type.matcher.ListStringMatcher";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStringMatcher;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStringMatcher;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStringMatcher;
    static equals(a: ListStringMatcher | PlainMessage<ListStringMatcher> | undefined, b: ListStringMatcher | PlainMessage<ListStringMatcher> | undefined): boolean;
}
