import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * Identifies a percentage, in the range [0.0, 100.0].
 *
 * @generated from message envoy.type.Percent
 */
export declare class Percent extends Message<Percent> {
    /**
     * @generated from field: double value = 1;
     */
    value: number;
    constructor(data?: PartialMessage<Percent>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.type.Percent";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Percent;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Percent;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Percent;
    static equals(a: Percent | PlainMessage<Percent> | undefined, b: Percent | PlainMessage<Percent> | undefined): boolean;
}
/**
 * A fractional percentage is used in cases in which for performance reasons performing floating
 * point to integer conversions during randomness calculations is undesirable. The message includes
 * both a numerator and denominator that together determine the final fractional value.
 *
 * * **Example**: 1/100 = 1%.
 * * **Example**: 3/10000 = 0.03%.
 *
 * @generated from message envoy.type.FractionalPercent
 */
export declare class FractionalPercent extends Message<FractionalPercent> {
    /**
     * Specifies the numerator. Defaults to 0.
     *
     * @generated from field: uint32 numerator = 1;
     */
    numerator: number;
    /**
     * Specifies the denominator. If the denominator specified is less than the numerator, the final
     * fractional percentage is capped at 1 (100%).
     *
     * @generated from field: envoy.type.FractionalPercent.DenominatorType denominator = 2;
     */
    denominator: FractionalPercent_DenominatorType;
    constructor(data?: PartialMessage<FractionalPercent>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.type.FractionalPercent";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FractionalPercent;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FractionalPercent;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FractionalPercent;
    static equals(a: FractionalPercent | PlainMessage<FractionalPercent> | undefined, b: FractionalPercent | PlainMessage<FractionalPercent> | undefined): boolean;
}
/**
 * Fraction percentages support several fixed denominator values.
 *
 * @generated from enum envoy.type.FractionalPercent.DenominatorType
 */
export declare enum FractionalPercent_DenominatorType {
    /**
     * 100.
     *
     * **Example**: 1/100 = 1%.
     *
     * @generated from enum value: HUNDRED = 0;
     */
    HUNDRED = 0,
    /**
     * 10,000.
     *
     * **Example**: 1/10000 = 0.01%.
     *
     * @generated from enum value: TEN_THOUSAND = 1;
     */
    TEN_THOUSAND = 1,
    /**
     * 1,000,000.
     *
     * **Example**: 1/1000000 = 0.0001%.
     *
     * @generated from enum value: MILLION = 2;
     */
    MILLION = 2
}
