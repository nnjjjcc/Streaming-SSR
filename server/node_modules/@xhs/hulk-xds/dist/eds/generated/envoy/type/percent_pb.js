"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/type/percent.proto (package envoy.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.FractionalPercent_DenominatorType = exports.FractionalPercent = exports.Percent = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * Identifies a percentage, in the range [0.0, 100.0].
 *
 * @generated from message envoy.type.Percent
 */
class Percent extends protobuf_1.Message {
    /**
     * @generated from field: double value = 1;
     */
    value = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.Percent";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    ]);
    static fromBinary(bytes, options) {
        return new Percent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Percent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Percent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Percent, a, b);
    }
}
exports.Percent = Percent;
/**
 * A fractional percentage is used in cases in which for performance reasons performing floating
 * point to integer conversions during randomness calculations is undesirable. The message includes
 * both a numerator and denominator that together determine the final fractional value.
 *
 * * **Example**: 1/100 = 1%.
 * * **Example**: 3/10000 = 0.03%.
 *
 * @generated from message envoy.type.FractionalPercent
 */
class FractionalPercent extends protobuf_1.Message {
    /**
     * Specifies the numerator. Defaults to 0.
     *
     * @generated from field: uint32 numerator = 1;
     */
    numerator = 0;
    /**
     * Specifies the denominator. If the denominator specified is less than the numerator, the final
     * fractional percentage is capped at 1 (100%).
     *
     * @generated from field: envoy.type.FractionalPercent.DenominatorType denominator = 2;
     */
    denominator = FractionalPercent_DenominatorType.HUNDRED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.FractionalPercent";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "numerator", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 2, name: "denominator", kind: "enum", T: protobuf_1.proto3.getEnumType(FractionalPercent_DenominatorType) },
    ]);
    static fromBinary(bytes, options) {
        return new FractionalPercent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FractionalPercent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FractionalPercent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FractionalPercent, a, b);
    }
}
exports.FractionalPercent = FractionalPercent;
/**
 * Fraction percentages support several fixed denominator values.
 *
 * @generated from enum envoy.type.FractionalPercent.DenominatorType
 */
var FractionalPercent_DenominatorType;
(function (FractionalPercent_DenominatorType) {
    /**
     * 100.
     *
     * **Example**: 1/100 = 1%.
     *
     * @generated from enum value: HUNDRED = 0;
     */
    FractionalPercent_DenominatorType[FractionalPercent_DenominatorType["HUNDRED"] = 0] = "HUNDRED";
    /**
     * 10,000.
     *
     * **Example**: 1/10000 = 0.01%.
     *
     * @generated from enum value: TEN_THOUSAND = 1;
     */
    FractionalPercent_DenominatorType[FractionalPercent_DenominatorType["TEN_THOUSAND"] = 1] = "TEN_THOUSAND";
    /**
     * 1,000,000.
     *
     * **Example**: 1/1000000 = 0.0001%.
     *
     * @generated from enum value: MILLION = 2;
     */
    FractionalPercent_DenominatorType[FractionalPercent_DenominatorType["MILLION"] = 2] = "MILLION";
})(FractionalPercent_DenominatorType || (exports.FractionalPercent_DenominatorType = FractionalPercent_DenominatorType = {}));
// Retrieve enum metadata with: proto3.getEnumType(FractionalPercent_DenominatorType)
protobuf_1.proto3.util.setEnumType(FractionalPercent_DenominatorType, "envoy.type.FractionalPercent.DenominatorType", [
    { no: 0, name: "HUNDRED" },
    { no: 1, name: "TEN_THOUSAND" },
    { no: 2, name: "MILLION" },
]);
