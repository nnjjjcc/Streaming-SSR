import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * Envoy uses SemVer (https://semver.org/). Major/minor versions indicate
 * expected behaviors and APIs, the patch version field is used only
 * for security fixes and can be generally ignored.
 *
 * @generated from message envoy.type.SemanticVersion
 */
export declare class SemanticVersion extends Message<SemanticVersion> {
    /**
     * @generated from field: uint32 major_number = 1;
     */
    majorNumber: number;
    /**
     * @generated from field: uint32 minor_number = 2;
     */
    minorNumber: number;
    /**
     * @generated from field: uint32 patch = 3;
     */
    patch: number;
    constructor(data?: PartialMessage<SemanticVersion>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.type.SemanticVersion";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SemanticVersion;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SemanticVersion;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SemanticVersion;
    static equals(a: SemanticVersion | PlainMessage<SemanticVersion> | undefined, b: SemanticVersion | PlainMessage<SemanticVersion> | undefined): boolean;
}
