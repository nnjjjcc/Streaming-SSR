import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * Generic socket option message. This would be used to set socket options that
 * might not exist in upstream kernels or precompiled Envoy binaries.
 * [#next-free-field: 7]
 *
 * @generated from message envoy.api.v2.core.SocketOption
 */
export declare class SocketOption extends Message<SocketOption> {
    /**
     * An optional name to give this socket option for debugging, etc.
     * Uniqueness is not required and no special meaning is assumed.
     *
     * @generated from field: string description = 1;
     */
    description: string;
    /**
     * Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP
     *
     * @generated from field: int64 level = 2;
     */
    level: bigint;
    /**
     * The numeric name as passed to setsockopt
     *
     * @generated from field: int64 name = 3;
     */
    name: bigint;
    /**
     * @generated from oneof envoy.api.v2.core.SocketOption.value
     */
    value: {
        /**
         * Because many sockopts take an int value.
         *
         * @generated from field: int64 int_value = 4;
         */
        value: bigint;
        case: "intValue";
    } | {
        /**
         * Otherwise it's a byte buffer.
         *
         * @generated from field: bytes buf_value = 5;
         */
        value: Uint8Array;
        case: "bufValue";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * The state in which the option will be applied. When used in BindConfig
     * STATE_PREBIND is currently the only valid value.
     *
     * @generated from field: envoy.api.v2.core.SocketOption.SocketState state = 6;
     */
    state: SocketOption_SocketState;
    constructor(data?: PartialMessage<SocketOption>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.SocketOption";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SocketOption;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SocketOption;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SocketOption;
    static equals(a: SocketOption | PlainMessage<SocketOption> | undefined, b: SocketOption | PlainMessage<SocketOption> | undefined): boolean;
}
/**
 * @generated from enum envoy.api.v2.core.SocketOption.SocketState
 */
export declare enum SocketOption_SocketState {
    /**
     * Socket options are applied after socket creation but before binding the socket to a port
     *
     * @generated from enum value: STATE_PREBIND = 0;
     */
    STATE_PREBIND = 0,
    /**
     * Socket options are applied after binding the socket to a port but before calling listen()
     *
     * @generated from enum value: STATE_BOUND = 1;
     */
    STATE_BOUND = 1,
    /**
     * Socket options are applied after calling listen()
     *
     * @generated from enum value: STATE_LISTENING = 2;
     */
    STATE_LISTENING = 2
}
