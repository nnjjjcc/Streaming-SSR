"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/api/v2/core/backoff.proto (package envoy.api.v2.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackoffStrategy = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const duration_pb_1 = require("../../../../google/protobuf/duration_pb");
/**
 * Configuration defining a jittered exponential back off strategy.
 *
 * @generated from message envoy.api.v2.core.BackoffStrategy
 */
class BackoffStrategy extends protobuf_1.Message {
    /**
     * The base interval to be used for the next back off computation. It should
     * be greater than zero and less than or equal to :ref:`max_interval
     * <envoy_api_field_core.BackoffStrategy.max_interval>`.
     *
     * @generated from field: google.protobuf.Duration base_interval = 1;
     */
    baseInterval;
    /**
     * Specifies the maximum interval between retries. This parameter is optional,
     * but must be greater than or equal to the :ref:`base_interval
     * <envoy_api_field_core.BackoffStrategy.base_interval>` if set. The default
     * is 10 times the :ref:`base_interval
     * <envoy_api_field_core.BackoffStrategy.base_interval>`.
     *
     * @generated from field: google.protobuf.Duration max_interval = 2;
     */
    maxInterval;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.BackoffStrategy";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "base_interval", kind: "message", T: duration_pb_1.Duration },
        { no: 2, name: "max_interval", kind: "message", T: duration_pb_1.Duration },
    ]);
    static fromBinary(bytes, options) {
        return new BackoffStrategy().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BackoffStrategy().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BackoffStrategy().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BackoffStrategy, a, b);
    }
}
exports.BackoffStrategy = BackoffStrategy;
