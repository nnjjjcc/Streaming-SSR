"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/api/v2/core/http_uri.proto (package envoy.api.v2.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpUri = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const duration_pb_1 = require("../../../../google/protobuf/duration_pb");
/**
 * Envoy external URI descriptor
 *
 * @generated from message envoy.api.v2.core.HttpUri
 */
class HttpUri extends protobuf_1.Message {
    /**
     * The HTTP server URI. It should be a full FQDN with protocol, host and path.
     *
     * Example:
     *
     * .. code-block:: yaml
     *
     *    uri: https://www.googleapis.com/oauth2/v1/certs
     *
     *
     * @generated from field: string uri = 1;
     */
    uri = "";
    /**
     * Specify how `uri` is to be fetched. Today, this requires an explicit
     * cluster, but in the future we may support dynamic cluster creation or
     * inline DNS resolution. See `issue
     * <https://github.com/envoyproxy/envoy/issues/1606>`_.
     *
     * @generated from oneof envoy.api.v2.core.HttpUri.http_upstream_type
     */
    httpUpstreamType = { case: undefined };
    /**
     * Sets the maximum duration in milliseconds that a response can take to arrive upon request.
     *
     * @generated from field: google.protobuf.Duration timeout = 3;
     */
    timeout;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.api.v2.core.HttpUri";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "http_upstream_type" },
        { no: 3, name: "timeout", kind: "message", T: duration_pb_1.Duration },
    ]);
    static fromBinary(bytes, options) {
        return new HttpUri().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HttpUri().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HttpUri().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HttpUri, a, b);
    }
}
exports.HttpUri = HttpUri;
