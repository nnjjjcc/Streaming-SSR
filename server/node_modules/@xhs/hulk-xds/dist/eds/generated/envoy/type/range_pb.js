"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=none"
// @generated from file envoy/type/range.proto (package envoy.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoubleRange = exports.Int32Range = exports.Int64Range = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * Specifies the int64 start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from message envoy.type.Int64Range
 */
class Int64Range extends protobuf_1.Message {
    /**
     * start of the range (inclusive)
     *
     * @generated from field: int64 start = 1;
     */
    start = protobuf_1.protoInt64.zero;
    /**
     * end of the range (exclusive)
     *
     * @generated from field: int64 end = 2;
     */
    end = protobuf_1.protoInt64.zero;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.Int64Range";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Int64Range().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int64Range().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int64Range().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Int64Range, a, b);
    }
}
exports.Int64Range = Int64Range;
/**
 * Specifies the int32 start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from message envoy.type.Int32Range
 */
class Int32Range extends protobuf_1.Message {
    /**
     * start of the range (inclusive)
     *
     * @generated from field: int32 start = 1;
     */
    start = 0;
    /**
     * end of the range (exclusive)
     *
     * @generated from field: int32 end = 2;
     */
    end = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.Int32Range";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Int32Range().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int32Range().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int32Range().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Int32Range, a, b);
    }
}
exports.Int32Range = Int32Range;
/**
 * Specifies the double start and end of the range using half-open interval semantics [start,
 * end).
 *
 * @generated from message envoy.type.DoubleRange
 */
class DoubleRange extends protobuf_1.Message {
    /**
     * start of the range (inclusive)
     *
     * @generated from field: double start = 1;
     */
    start = 0;
    /**
     * end of the range (exclusive)
     *
     * @generated from field: double end = 2;
     */
    end = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "envoy.type.DoubleRange";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "start", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 2, name: "end", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    ]);
    static fromBinary(bytes, options) {
        return new DoubleRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DoubleRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DoubleRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DoubleRange, a, b);
    }
}
exports.DoubleRange = DoubleRange;
