import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Duration } from "../../../../google/protobuf/duration_pb";
import { EventServiceConfig } from "./event_service_config_pb";
import { HeaderValueOption } from "./base_pb";
import { Int64Range } from "../../../type/range_pb";
import { CodecClientType } from "../../../type/http_pb";
import { StringMatcher } from "../../../type/matcher/string_pb";
import { Struct } from "../../../../google/protobuf/struct_pb";
import { Any } from "../../../../google/protobuf/any_pb";
/**
 * Endpoint health status.
 *
 * @generated from enum envoy.api.v2.core.HealthStatus
 */
export declare enum HealthStatus {
    /**
     * The health status is not known. This is interpreted by Envoy as *HEALTHY*.
     *
     * @generated from enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Healthy.
     *
     * @generated from enum value: HEALTHY = 1;
     */
    HEALTHY = 1,
    /**
     * Unhealthy.
     *
     * @generated from enum value: UNHEALTHY = 2;
     */
    UNHEALTHY = 2,
    /**
     * Connection draining in progress. E.g.,
     * `<https://aws.amazon.com/blogs/aws/elb-connection-draining-remove-instances-from-service-with-care/>`_
     * or
     * `<https://cloud.google.com/compute/docs/load-balancing/enabling-connection-draining>`_.
     * This is interpreted by Envoy as *UNHEALTHY*.
     *
     * @generated from enum value: DRAINING = 3;
     */
    DRAINING = 3,
    /**
     * Health check timed out. This is part of HDS and is interpreted by Envoy as
     * *UNHEALTHY*.
     *
     * @generated from enum value: TIMEOUT = 4;
     */
    TIMEOUT = 4,
    /**
     * Degraded.
     *
     * @generated from enum value: DEGRADED = 5;
     */
    DEGRADED = 5
}
/**
 * [#next-free-field: 23]
 *
 * @generated from message envoy.api.v2.core.HealthCheck
 */
export declare class HealthCheck extends Message<HealthCheck> {
    /**
     * The time to wait for a health check response. If the timeout is reached the
     * health check attempt will be considered a failure.
     *
     * @generated from field: google.protobuf.Duration timeout = 1;
     */
    timeout?: Duration;
    /**
     * The interval between health checks.
     *
     * @generated from field: google.protobuf.Duration interval = 2;
     */
    interval?: Duration;
    /**
     * An optional jitter amount in milliseconds. If specified, Envoy will start health
     * checking after for a random time in ms between 0 and initial_jitter. This only
     * applies to the first health check.
     *
     * @generated from field: google.protobuf.Duration initial_jitter = 20;
     */
    initialJitter?: Duration;
    /**
     * An optional jitter amount in milliseconds. If specified, during every
     * interval Envoy will add interval_jitter to the wait time.
     *
     * @generated from field: google.protobuf.Duration interval_jitter = 3;
     */
    intervalJitter?: Duration;
    /**
     * An optional jitter amount as a percentage of interval_ms. If specified,
     * during every interval Envoy will add interval_ms *
     * interval_jitter_percent / 100 to the wait time.
     *
     * If interval_jitter_ms and interval_jitter_percent are both set, both of
     * them will be used to increase the wait time.
     *
     * @generated from field: uint32 interval_jitter_percent = 18;
     */
    intervalJitterPercent: number;
    /**
     * The number of unhealthy health checks required before a host is marked
     * unhealthy. Note that for *http* health checking if a host responds with 503
     * this threshold is ignored and the host is considered unhealthy immediately.
     *
     * @generated from field: google.protobuf.UInt32Value unhealthy_threshold = 4;
     */
    unhealthyThreshold?: number;
    /**
     * The number of healthy health checks required before a host is marked
     * healthy. Note that during startup, only a single successful health check is
     * required to mark a host healthy.
     *
     * @generated from field: google.protobuf.UInt32Value healthy_threshold = 5;
     */
    healthyThreshold?: number;
    /**
     * [#not-implemented-hide:] Non-serving port for health checking.
     *
     * @generated from field: google.protobuf.UInt32Value alt_port = 6;
     */
    altPort?: number;
    /**
     * Reuse health check connection between health checks. Default is true.
     *
     * @generated from field: google.protobuf.BoolValue reuse_connection = 7;
     */
    reuseConnection?: boolean;
    /**
     * @generated from oneof envoy.api.v2.core.HealthCheck.health_checker
     */
    healthChecker: {
        /**
         * HTTP health check.
         *
         * @generated from field: envoy.api.v2.core.HealthCheck.HttpHealthCheck http_health_check = 8;
         */
        value: HealthCheck_HttpHealthCheck;
        case: "httpHealthCheck";
    } | {
        /**
         * TCP health check.
         *
         * @generated from field: envoy.api.v2.core.HealthCheck.TcpHealthCheck tcp_health_check = 9;
         */
        value: HealthCheck_TcpHealthCheck;
        case: "tcpHealthCheck";
    } | {
        /**
         * gRPC health check.
         *
         * @generated from field: envoy.api.v2.core.HealthCheck.GrpcHealthCheck grpc_health_check = 11;
         */
        value: HealthCheck_GrpcHealthCheck;
        case: "grpcHealthCheck";
    } | {
        /**
         * Custom health check.
         *
         * @generated from field: envoy.api.v2.core.HealthCheck.CustomHealthCheck custom_health_check = 13;
         */
        value: HealthCheck_CustomHealthCheck;
        case: "customHealthCheck";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * The "no traffic interval" is a special health check interval that is used when a cluster has
     * never had traffic routed to it. This lower interval allows cluster information to be kept up to
     * date, without sending a potentially large amount of active health checking traffic for no
     * reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
     * standard health check interval that is defined. Note that this interval takes precedence over
     * any other.
     *
     * The default value for "no traffic interval" is 60 seconds.
     *
     * @generated from field: google.protobuf.Duration no_traffic_interval = 12;
     */
    noTrafficInterval?: Duration;
    /**
     * The "unhealthy interval" is a health check interval that is used for hosts that are marked as
     * unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
     * standard health check interval that is defined.
     *
     * The default value for "unhealthy interval" is the same as "interval".
     *
     * @generated from field: google.protobuf.Duration unhealthy_interval = 14;
     */
    unhealthyInterval?: Duration;
    /**
     * The "unhealthy edge interval" is a special health check interval that is used for the first
     * health check right after a host is marked as unhealthy. For subsequent health checks
     * Envoy will shift back to using either "unhealthy interval" if present or the standard health
     * check interval that is defined.
     *
     * The default value for "unhealthy edge interval" is the same as "unhealthy interval".
     *
     * @generated from field: google.protobuf.Duration unhealthy_edge_interval = 15;
     */
    unhealthyEdgeInterval?: Duration;
    /**
     * The "healthy edge interval" is a special health check interval that is used for the first
     * health check right after a host is marked as healthy. For subsequent health checks
     * Envoy will shift back to using the standard health check interval that is defined.
     *
     * The default value for "healthy edge interval" is the same as the default interval.
     *
     * @generated from field: google.protobuf.Duration healthy_edge_interval = 16;
     */
    healthyEdgeInterval?: Duration;
    /**
     * Specifies the path to the :ref:`health check event log <arch_overview_health_check_logging>`.
     * If empty, no event log will be written.
     *
     * @generated from field: string event_log_path = 17;
     */
    eventLogPath: string;
    /**
     * [#not-implemented-hide:]
     * The gRPC service for the health check event service.
     * If empty, health check events won't be sent to a remote endpoint.
     *
     * @generated from field: envoy.api.v2.core.EventServiceConfig event_service = 22;
     */
    eventService?: EventServiceConfig;
    /**
     * If set to true, health check failure events will always be logged. If set to false, only the
     * initial health check failure event will be logged.
     * The default value is false.
     *
     * @generated from field: bool always_log_health_check_failures = 19;
     */
    alwaysLogHealthCheckFailures: boolean;
    /**
     * This allows overriding the cluster TLS settings, just for health check connections.
     *
     * @generated from field: envoy.api.v2.core.HealthCheck.TlsOptions tls_options = 21;
     */
    tlsOptions?: HealthCheck_TlsOptions;
    constructor(data?: PartialMessage<HealthCheck>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck;
    static equals(a: HealthCheck | PlainMessage<HealthCheck> | undefined, b: HealthCheck | PlainMessage<HealthCheck> | undefined): boolean;
}
/**
 * Describes the encoding of the payload bytes in the payload.
 *
 * @generated from message envoy.api.v2.core.HealthCheck.Payload
 */
export declare class HealthCheck_Payload extends Message<HealthCheck_Payload> {
    /**
     * @generated from oneof envoy.api.v2.core.HealthCheck.Payload.payload
     */
    payload: {
        /**
         * Hex encoded payload. E.g., "000000FF".
         *
         * @generated from field: string text = 1;
         */
        value: string;
        case: "text";
    } | {
        /**
         * [#not-implemented-hide:] Binary payload.
         *
         * @generated from field: bytes binary = 2;
         */
        value: Uint8Array;
        case: "binary";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<HealthCheck_Payload>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck.Payload";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck_Payload;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck_Payload;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck_Payload;
    static equals(a: HealthCheck_Payload | PlainMessage<HealthCheck_Payload> | undefined, b: HealthCheck_Payload | PlainMessage<HealthCheck_Payload> | undefined): boolean;
}
/**
 * [#next-free-field: 12]
 *
 * @generated from message envoy.api.v2.core.HealthCheck.HttpHealthCheck
 */
export declare class HealthCheck_HttpHealthCheck extends Message<HealthCheck_HttpHealthCheck> {
    /**
     * The value of the host header in the HTTP health check request. If
     * left empty (default value), the name of the cluster this health check is associated
     * with will be used. The host header can be customized for a specific endpoint by setting the
     * :ref:`hostname <envoy_api_field_endpoint.Endpoint.HealthCheckConfig.hostname>` field.
     *
     * @generated from field: string host = 1;
     */
    host: string;
    /**
     * Specifies the HTTP path that will be requested during health checking. For example
     * *\/healthcheck*.
     *
     * @generated from field: string path = 2;
     */
    path: string;
    /**
     * [#not-implemented-hide:] HTTP specific payload.
     *
     * @generated from field: envoy.api.v2.core.HealthCheck.Payload send = 3;
     */
    send?: HealthCheck_Payload;
    /**
     * [#not-implemented-hide:] HTTP specific response.
     *
     * @generated from field: envoy.api.v2.core.HealthCheck.Payload receive = 4;
     */
    receive?: HealthCheck_Payload;
    /**
     * An optional service name parameter which is used to validate the identity of
     * the health checked cluster. See the :ref:`architecture overview
     * <arch_overview_health_checking_identity>` for more information.
     *
     * .. attention::
     *
     *   This field has been deprecated in favor of `service_name_matcher` for better flexibility
     *   over matching with service-cluster name.
     *
     * @generated from field: string service_name = 5 [deprecated = true];
     * @deprecated
     */
    serviceName: string;
    /**
     * Specifies a list of HTTP headers that should be added to each request that is sent to the
     * health checked cluster. For more information, including details on header value syntax, see
     * the documentation on :ref:`custom request headers
     * <config_http_conn_man_headers_custom_request_headers>`.
     *
     * @generated from field: repeated envoy.api.v2.core.HeaderValueOption request_headers_to_add = 6;
     */
    requestHeadersToAdd: HeaderValueOption[];
    /**
     * Specifies a list of HTTP headers that should be removed from each request that is sent to the
     * health checked cluster.
     *
     * @generated from field: repeated string request_headers_to_remove = 8;
     */
    requestHeadersToRemove: string[];
    /**
     * If set, health checks will be made using http/2.
     * Deprecated, use :ref:`codec_client_type
     * <envoy_api_field_core.HealthCheck.HttpHealthCheck.codec_client_type>` instead.
     *
     * @generated from field: bool use_http2 = 7 [deprecated = true];
     * @deprecated
     */
    useHttp2: boolean;
    /**
     * Specifies a list of HTTP response statuses considered healthy. If provided, replaces default
     * 200-only policy - 200 must be included explicitly as needed. Ranges follow half-open
     * semantics of :ref:`Int64Range <envoy_api_msg_type.Int64Range>`. The start and end of each
     * range are required. Only statuses in the range [100, 600) are allowed.
     *
     * @generated from field: repeated envoy.type.Int64Range expected_statuses = 9;
     */
    expectedStatuses: Int64Range[];
    /**
     * Use specified application protocol for health checks.
     *
     * @generated from field: envoy.type.CodecClientType codec_client_type = 10;
     */
    codecClientType: CodecClientType;
    /**
     * An optional service name parameter which is used to validate the identity of
     * the health checked cluster using a :ref:`StringMatcher
     * <envoy_api_msg_type.matcher.StringMatcher>`. See the :ref:`architecture overview
     * <arch_overview_health_checking_identity>` for more information.
     *
     * @generated from field: envoy.type.matcher.StringMatcher service_name_matcher = 11;
     */
    serviceNameMatcher?: StringMatcher;
    constructor(data?: PartialMessage<HealthCheck_HttpHealthCheck>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck.HttpHealthCheck";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck_HttpHealthCheck;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck_HttpHealthCheck;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck_HttpHealthCheck;
    static equals(a: HealthCheck_HttpHealthCheck | PlainMessage<HealthCheck_HttpHealthCheck> | undefined, b: HealthCheck_HttpHealthCheck | PlainMessage<HealthCheck_HttpHealthCheck> | undefined): boolean;
}
/**
 * @generated from message envoy.api.v2.core.HealthCheck.TcpHealthCheck
 */
export declare class HealthCheck_TcpHealthCheck extends Message<HealthCheck_TcpHealthCheck> {
    /**
     * Empty payloads imply a connect-only health check.
     *
     * @generated from field: envoy.api.v2.core.HealthCheck.Payload send = 1;
     */
    send?: HealthCheck_Payload;
    /**
     * When checking the response, “fuzzy” matching is performed such that each
     * binary block must be found, and in the order specified, but not
     * necessarily contiguous.
     *
     * @generated from field: repeated envoy.api.v2.core.HealthCheck.Payload receive = 2;
     */
    receive: HealthCheck_Payload[];
    constructor(data?: PartialMessage<HealthCheck_TcpHealthCheck>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck.TcpHealthCheck";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck_TcpHealthCheck;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck_TcpHealthCheck;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck_TcpHealthCheck;
    static equals(a: HealthCheck_TcpHealthCheck | PlainMessage<HealthCheck_TcpHealthCheck> | undefined, b: HealthCheck_TcpHealthCheck | PlainMessage<HealthCheck_TcpHealthCheck> | undefined): boolean;
}
/**
 * @generated from message envoy.api.v2.core.HealthCheck.RedisHealthCheck
 */
export declare class HealthCheck_RedisHealthCheck extends Message<HealthCheck_RedisHealthCheck> {
    /**
     * If set, optionally perform ``EXISTS <key>`` instead of ``PING``. A return value
     * from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
     * than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
     * by setting the specified key to any value and waiting for traffic to drain.
     *
     * @generated from field: string key = 1;
     */
    key: string;
    constructor(data?: PartialMessage<HealthCheck_RedisHealthCheck>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck.RedisHealthCheck";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck_RedisHealthCheck;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck_RedisHealthCheck;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck_RedisHealthCheck;
    static equals(a: HealthCheck_RedisHealthCheck | PlainMessage<HealthCheck_RedisHealthCheck> | undefined, b: HealthCheck_RedisHealthCheck | PlainMessage<HealthCheck_RedisHealthCheck> | undefined): boolean;
}
/**
 * `grpc.health.v1.Health
 * <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
 * healthcheck. See `gRPC doc <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
 * for details.
 *
 * @generated from message envoy.api.v2.core.HealthCheck.GrpcHealthCheck
 */
export declare class HealthCheck_GrpcHealthCheck extends Message<HealthCheck_GrpcHealthCheck> {
    /**
     * An optional service name parameter which will be sent to gRPC service in
     * `grpc.health.v1.HealthCheckRequest
     * <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
     * message. See `gRPC health-checking overview
     * <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
     *
     * @generated from field: string service_name = 1;
     */
    serviceName: string;
    /**
     * The value of the :authority header in the gRPC health check request. If
     * left empty (default value), the name of the cluster this health check is associated
     * with will be used. The authority header can be customized for a specific endpoint by setting
     * the :ref:`hostname <envoy_api_field_endpoint.Endpoint.HealthCheckConfig.hostname>` field.
     *
     * @generated from field: string authority = 2;
     */
    authority: string;
    constructor(data?: PartialMessage<HealthCheck_GrpcHealthCheck>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck.GrpcHealthCheck";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck_GrpcHealthCheck;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck_GrpcHealthCheck;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck_GrpcHealthCheck;
    static equals(a: HealthCheck_GrpcHealthCheck | PlainMessage<HealthCheck_GrpcHealthCheck> | undefined, b: HealthCheck_GrpcHealthCheck | PlainMessage<HealthCheck_GrpcHealthCheck> | undefined): boolean;
}
/**
 * Custom health check.
 *
 * @generated from message envoy.api.v2.core.HealthCheck.CustomHealthCheck
 */
export declare class HealthCheck_CustomHealthCheck extends Message<HealthCheck_CustomHealthCheck> {
    /**
     * The registered name of the custom health checker.
     *
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * A custom health checker specific configuration which depends on the custom health checker
     * being instantiated. See :api:`envoy/config/health_checker` for reference.
     *
     * @generated from oneof envoy.api.v2.core.HealthCheck.CustomHealthCheck.config_type
     */
    configType: {
        /**
         * @generated from field: google.protobuf.Struct config = 2 [deprecated = true];
         * @deprecated
         */
        value: Struct;
        case: "config";
    } | {
        /**
         * @generated from field: google.protobuf.Any typed_config = 3;
         */
        value: Any;
        case: "typedConfig";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<HealthCheck_CustomHealthCheck>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck.CustomHealthCheck";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck_CustomHealthCheck;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck_CustomHealthCheck;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck_CustomHealthCheck;
    static equals(a: HealthCheck_CustomHealthCheck | PlainMessage<HealthCheck_CustomHealthCheck> | undefined, b: HealthCheck_CustomHealthCheck | PlainMessage<HealthCheck_CustomHealthCheck> | undefined): boolean;
}
/**
 * Health checks occur over the transport socket specified for the cluster. This implies that if a
 * cluster is using a TLS-enabled transport socket, the health check will also occur over TLS.
 *
 * This allows overriding the cluster TLS settings, just for health check connections.
 *
 * @generated from message envoy.api.v2.core.HealthCheck.TlsOptions
 */
export declare class HealthCheck_TlsOptions extends Message<HealthCheck_TlsOptions> {
    /**
     * Specifies the ALPN protocols for health check connections. This is useful if the
     * corresponding upstream is using ALPN-based :ref:`FilterChainMatch
     * <envoy_api_msg_listener.FilterChainMatch>` along with different protocols for health checks
     * versus data connections. If empty, no ALPN protocols will be set on health check connections.
     *
     * @generated from field: repeated string alpn_protocols = 1;
     */
    alpnProtocols: string[];
    constructor(data?: PartialMessage<HealthCheck_TlsOptions>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "envoy.api.v2.core.HealthCheck.TlsOptions";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck_TlsOptions;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck_TlsOptions;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck_TlsOptions;
    static equals(a: HealthCheck_TlsOptions | PlainMessage<HealthCheck_TlsOptions> | undefined, b: HealthCheck_TlsOptions | PlainMessage<HealthCheck_TlsOptions> | undefined): boolean;
}
