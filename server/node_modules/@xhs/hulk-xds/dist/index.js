"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EDS = exports.Mesh = void 0;
/**
 * @@xhs/hulk-xds
 *
 * ```shell
 * npm i @xhs/hulk-xds -S
 * ```
 *
 * 使用方式:
 *
 * - **{@linkcode EDS}** 用来实例化连接对应环境EDS的客户端
 *
 * ```typescript
 * import { EDS } from '@xhs/hulk-xds'
 *
 * const eds = new EDS()
 * ```
 *
 * - **eds.{@linkcode onUpdate}** 用来创建服务发现的订阅，实时通知所订阅服务的 **{@linkcode Resource}**[]
 *
 * ```typescript
 * const name: string = 'java-rns' // 服务注册时使用的服务名
 * const protocol: Protocol = 'thrift' // 服务的通信协议
 *
 * eds.onUpdate( // 创建订阅
 *   { name, protocol },
 *   (resource: Resource[]) => {
 *     // resource[] 返回格式：
 *     //
 *     // [
 *     //   {
 *     //     address: {
 *     //       ip: '192.168.131.145',
 *     //       port: 4512,
 *     //     },
 *     //     metadata: {
 *     //       tags: {
 *     //         appid: 'javarns',
 *     //         hostname: 'javarns-service-xuanwo-f4bfffdb-9h2k2',
 *     //         tags: '', // service env tag
 *     //         weight: 100,
 *     //       },
 *     //     },
 *     //   },
 *     //   {
 *     //     address: {
 *     //       ip: '192.168.143.187',
 *     //       port: 4512,
 *     //     },
 *     //     metadata: {
 *     //       tags: {
 *     //         appid: 'javarns',
 *     //         hostname: 'javarns-service-default-p-yunrui2-7fffcc67c-rfpgf',
 *     //         tags: 'yunrui2', // service env tag
 *     //         weight: 100,
 *     //       },
 *     //     }
 *     //   },
 *     //   ...
 *     // ]
 *     // do what ever you need
 *   }
 * )
 * ```
 * redis也是一样
 * ```typescript
 * const name: string = 'corvus-fe-config'
 * const protocol: Protocol = 'corvus'
 *
 * eds.onUpdate(
 *   { name, protocol },
 *   (resource: Resource[]) => {
 *     // do what ever you need
 *   }
 * )
 * ```
 * - done，客户端会负责维护与 eds 的连接，onUpdate永远会返回最新的数据
 * ```
 *
 * - **eds.{@linkcode get}** 用来获取一次性的调用地址 **{@linkcode Address}** EDS 内部默认实现了负载均衡
 *
 * ```typescript
 * const name: string = 'java-rns' // 服务注册时使用的服务名
 * const protocol: Protocol = 'thrift' // 服务的通信协议
 *
 * eds.get({ name, protocol }).then(address => {
 *   // Address 返回格式：
 *   //
 *   // {
 *   //   ip: '192.168.143.187',
 *   //   port: 4512,
 *   // }
 *   // do what ever you need
 * })
 * ```
 *
 * @module @xhs/hulk-xds
 *
 */
var eds_1 = require("./eds");
Object.defineProperty(exports, "Mesh", { enumerable: true, get: function () { return eds_1.Mesh; } });
Object.defineProperty(exports, "EDS", { enumerable: true, get: function () { return eds_1.EDS; } });
