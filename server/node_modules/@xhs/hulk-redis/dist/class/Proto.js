"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Proto = void 0;
class Proto {
    end = '';
    result = [];
    write(data) {
        const array = (this.end + data.toString()).split('\r\n');
        this.end = array.pop();
        this.result = this.result.concat(array);
        return this;
    }
    parse() {
        const data = {
            done: true,
            value: {
                error: false,
                data: null,
            },
        };
        if (this.result.length < 1 || (this.result.length === 1 && this.end.length !== 0)) {
            data.done = false;
        }
        else {
            const [current] = this.result;
            switch (current.charAt(0)) {
                case '+':
                    data.value = {
                        error: false,
                        data: current.slice(1),
                    };
                    this.result.shift();
                    break;
                case '-':
                    data.value = {
                        error: true,
                        data: current.slice(1),
                    };
                    this.result.shift();
                    break;
                case ':':
                    data.value = {
                        error: false,
                        data: Number(current.slice(1)),
                    };
                    this.result.shift();
                    break;
                case '$': {
                    const size = parseInt(current.slice(1), 10);
                    this.result.shift();
                    if (size === -1) {
                        data.value = {
                            error: false,
                            data: null,
                        };
                    }
                    else {
                        const res = this.result.shift();
                        let ls = Buffer.byteLength(res);
                        if (ls === size) {
                            data.value = {
                                error: false,
                                data: res,
                            };
                        }
                        else {
                            data.value = {
                                error: false,
                                data: [res],
                            };
                            while (this.result.length > 0) {
                                const str = this.result.shift();
                                data.value.data.push(str);
                                ls += Buffer.byteLength(str);
                            }
                        }
                    }
                    break;
                }
                case '*': {
                    const len = parseInt(current.slice(1), 10);
                    if (len === 0) {
                        data.value = {
                            error: false,
                            data: [],
                        };
                        this.result.shift();
                    }
                    else {
                        let i;
                        data.value.data = [];
                        for (i = 1; i < this.result.length && data.value.data.length < len; i++) {
                            if (this.result[i].slice(0, 3) === '$-1') {
                                data.value.data.push(null);
                            }
                            else if (typeof this.result[i + 1] === 'undefined') {
                                break;
                            }
                            else {
                                // eslint-disable-next-line no-plusplus
                                data.value.data.push(this.result[++i]);
                            }
                        }
                        if (data.value.data.length === len) {
                            this.result.splice(0, i);
                        }
                        else {
                            data.done = false;
                        }
                    }
                    break;
                }
                default:
                    data.done = false;
            }
        }
        return data;
    }
    static encode(...parameters) {
        return parameters
            .reduce((a, c) => {
            const parameter = c.toString();
            return `${a}$${Buffer.byteLength(parameter)}\r\n${parameter}\r\n`;
        }, `*${parameters.length}\r\n`);
    }
}
exports.Proto = Proto;
