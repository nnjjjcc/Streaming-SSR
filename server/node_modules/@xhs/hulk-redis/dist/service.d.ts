import { RedisOptions } from './interface';
export declare class Redis {
    static defaultOptions: Required<Pick<RedisOptions, 'commandTimeout' | 'connectionTimeout'>>;
    private options;
    private connections;
    constructor(options: RedisOptions);
    static key({ ip, port }: {
        ip: string;
        port: number;
    }): string;
    private reportState;
    private getConnection;
    terminate(): void;
    command<T>(...parameters: (string | number)[]): Promise<T>;
    /**
     *
     * https://redis.io/commands#generic
     *
     */
    /**
     * https://redis.io/commands/keys
     */
    keys(pattern?: string): Promise<string[]>;
    /**
     * https://redis.io/commands/randomkey
     */
    randomkey(): Promise<string | null>;
    /**
     * https://redis.io/commands/type
     */
    type(key: string): Promise<'string' | 'list' | 'set' | 'zset' | 'hash' | 'stream' | 'none'>;
    /**
     * https://redis.io/commands/rename
     */
    rename(key: string, newKey: string): Promise<'OK'>;
    /**
     * https://redis.io/commands/renamenx
     */
    renamenx(key: string, newKey: string): Promise<0 | 1>;
    /**
     * https://redis.io/commands/copy
     */
    copy(source: string, destination: string): Promise<0 | 1>;
    /**
     * https://redis.io/commands/del
     */
    del(...keys: string[]): Promise<number>;
    /**
     * https://redis.io/commands/unlink
     */
    unlink(...keys: string[]): Promise<number>;
    /**
     * https://redis.io/commands/move
     */
    move(key: string, db: number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/exists
     */
    exists(...keys: string[]): Promise<number>;
    /**
     * https://redis.io/commands/expire
     */
    expire(key: string, seconds: number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/pexpire
     */
    pexpire(key: string, milliseconds: number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/expireat
     */
    expireat(key: string, secondsTimestamp: number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/pexpireat
     */
    pexpireat(key: string, millisecondsTimestamp: number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/expiretime
     */
    expiretime(key: string): Promise<number>;
    /**
     * https://redis.io/commands/expiretime
     */
    pexpiretime(key: string): Promise<number>;
    /**
     * https://redis.io/commands/ttl
     */
    ttl(key: string): Promise<number>;
    /**
     * https://redis.io/commands/pttl
     */
    pttl(key: string): Promise<number>;
    /**
     * https://redis.io/commands/persist
     */
    persist(key: string): Promise<0 | 1>;
    /**
     *
     * https://redis.io/commands#string
     *
     */
    /**
     * https://redis.io/commands/set
     */
    set(key: string, value: string | number, ...options: (string | number)[]): Promise<string>;
    /**
     * https://redis.io/commands/setnx
     */
    setnx(key: string, value: string | number, ...options: (string | number)[]): Promise<0 | 1>;
    /**
     * https://redis.io/commands/setrange
     */
    setrange(key: string, offset: number, value: string | number): Promise<number>;
    /**
     * https://redis.io/commands/setex
     */
    setex(key: string, seconds: number, value: string | number): Promise<'OK'>;
    /**
     * https://redis.io/commands/psetex
     */
    psetex(key: string, milliseconds: number, value: string | number): Promise<'OK'>;
    /**
     * https://redis.io/commands/mset
     */
    mset(obj: Record<string, string>): Promise<'OK'>;
    /**
     * https://redis.io/commands/msetnx
     */
    msetnx(obj: Record<string, string>): Promise<number>;
    /**
     * https://redis.io/commands/get
     */
    get(key: string): Promise<string | number | null>;
    /**
     * https://redis.io/commands/getex
     */
    getex(key: string, ...options: [] | ['PERSIST'] | ['EX' | 'PX' | 'EXAT' | 'EXAT' | 'PXAT', number]): Promise<string | number | null>;
    /**
     * https://redis.io/commands/getdel
     */
    getdel(key: string): Promise<string | number | null>;
    /**
     * https://redis.io/commands/getrange
     */
    getrange(key: string, [start, end]?: [number, number]): Promise<string | null>;
    /**
     * https://redis.io/commands/getset
     */
    getset(key: string, value: string | number): Promise<string | number | null>;
    /**
     * https://redis.io/commands/mget
     */
    mget(...keys: string[]): Promise<(string | number | null)[]>;
    /**
     * https://redis.io/commands/decr
     */
    decr(key: string): Promise<number>;
    /**
     * https://redis.io/commands/decrby
     */
    decrby(key: string, decrement: number): Promise<number>;
    /**
     * https://redis.io/commands/incr
     */
    incr(key: string): Promise<number>;
    /**
     * https://redis.io/commands/incrby
     */
    incrby(key: string, increment: number): Promise<number>;
    /**
     * https://redis.io/commands/incrbyfloat
     */
    incrbyfloat(key: string, increment: number): Promise<string>;
    /**
     * https://redis.io/commands/strlen
     */
    strlen(key: string): Promise<number>;
    /**
     * https://redis.io/commands/append
     */
    append(key: string, value: string | number): Promise<number>;
    /**
     * https://redis.io/commands#hash
     */
    /**
     * https://redis.io/commands/hset
     */
    hset(key: string, field: string, value: string | number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/hsetnx
     */
    hsetnx(key: string, field: string, value: string | number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/hmset
     */
    hmset(key: string, obj: Record<string, string | number>): Promise<string>;
    /**
     * https://redis.io/commands/hget
     */
    hget(key: string, field: string): Promise<string | null>;
    /**
     * https://redis.io/commands/hgetall
     */
    hgetall(key: string): Promise<Record<string, string>>;
    /**
     * https://redis.io/commands/hmget
     */
    hmget(key: string, ...fields: string[]): Promise<(string | null)[]>;
    /**
     * https://redis.io/commands/hdel
     */
    hdel(key: string, ...fields: string[]): Promise<number>;
    /**
     * https://redis.io/commands/hexists
     */
    hexists(key: string, field: string): Promise<number>;
    /**
     * https://redis.io/commands/hkeys
     */
    hkeys(key: string): Promise<string[]>;
    /**
     * https://redis.io/commands/hvals
     */
    hvals(key: string): Promise<string[]>;
    /**
     * https://redis.io/commands/hlen
     */
    hlen(key: string): Promise<number>;
    /**
     * https://redis.io/commands/hstrlen
     */
    hstrlen(key: string, field: string): Promise<number>;
    /**
     * https://redis.io/commands/hincrby
     */
    hincrby(key: string, field: string, increment: number): Promise<number>;
    /**
     * https://redis.io/commands/hincrbyfloat
     */
    hincrbyfloat(key: string, field: string, increment: number): Promise<string>;
    /**
     * https://redis.io/commands#list
     */
    /**
     * https://redis.io/commands/lrem
     */
    lrem(key: string, count: number, value: string | number): Promise<number>;
    /**
     * https://redis.io/commands/ltrim
     */
    ltrim(key: string, start: number, stop: number): Promise<string>;
    /**
     * https://redis.io/commands/lset
     */
    lset(key: string, index: number, value: string | number): Promise<'OK'>;
    /**
     * https://redis.io/commands/linsert
     */
    linsert(key: string, type: 'BEFORE' | 'AFTER', pivot: string, value: string | number): Promise<number>;
    /**
     * https://redis.io/commands/lpush
     */
    lpush(key: string, ...values: (string | number)[]): Promise<number>;
    /**
     * https://redis.io/commands/lpushx
     */
    lpushx(key: string, ...values: (string | number)[]): Promise<number>;
    /**
     * https://redis.io/commands/rpush
     */
    rpush(key: string, ...values: (string | number)[]): Promise<number>;
    /**
     * https://redis.io/commands/rpushx
     */
    rpushx(key: string, ...values: (string | number)[]): Promise<number>;
    /**
     * https://redis.io/commands/blmove
     */
    blmove(source: string, destination: string, ...options: ['LEFT', 'RIGHT'] | ['RIGHT', 'LEFT']): Promise<string[]>;
    /**
     * https://redis.io/commands/lmove
     */
    lmove(source: string, destination: string, ...options: ['LEFT', 'RIGHT'] | ['RIGHT', 'LEFT']): Promise<string[]>;
    /**
     * https://redis.io/commands/blpop
     */
    blpop(timeout: number, ...keys: string[]): Promise<(string | null)[]>;
    /**
     * https://redis.io/commands/lpop
     */
    lpop(key: string): Promise<string | null>;
    lpop(key: string, count: number): Promise<string[]>;
    /**
     * https://redis.io/commands/brpop
     */
    brpop(timeout: number, ...keys: string[]): Promise<(string | null)[]>;
    /**
     * https://redis.io/commands/rpop
     */
    rpop(key: string): Promise<string | null>;
    rpop(key: string, count: number): Promise<string[]>;
    /**
     * https://redis.io/commands/lrange
     */
    lrange(key: string, start: number, stop: number): Promise<string[]>;
    /**
     * https://redis.io/commands/lindex
     */
    lindex(key: string, index: number): Promise<string | null>;
    /**
     * https://redis.io/commands/lpos
     */
    lpos(key: string, value: string | number, ...options: (string | number)[]): Promise<number>;
    /**
     * https://redis.io/commands/llen
     */
    llen(key: string): Promise<number>;
    /**
     * https://redis.io/commands#set
     */
    /**
     * https://redis.io/commands/sadd
     */
    sadd(key: string, ...members: (string | number)[]): Promise<number>;
    /**
     * https://redis.io/commands/scard
     */
    scard(key: string): Promise<number>;
    /**
     * https://redis.io/commands/sdiff
     */
    sdiff(key: string, ...keys: string[]): Promise<string[]>;
    /**
     * https://redis.io/commands/sdiffstore
     */
    sdiffstore(destination: string, key: string, ...keys: string[]): Promise<number>;
    /**
     * https://redis.io/commands/sinter
     */
    sinter(key: string, ...keys: string[]): Promise<string[]>;
    /**
     * https://redis.io/commands/sinterstore
     */
    sinterstore(destination: string, key: string, ...keys: string[]): Promise<number>;
    /**
     * https://redis.io/commands/sismember
     */
    sismember(key: string, member: string | number): Promise<0 | 1>;
    /**
     * https://redis.io/commands/smismember
     */
    smismember(key: string, ...members: (string | number)[]): Promise<(0 | 1)[]>;
    /**
     * https://redis.io/commands/smembers
     */
    smembers(key: string): Promise<string[]>;
    /**
     * https://redis.io/commands/smove
     */
    smove(source: string, destination: string, member: string): Promise<0 | 1>;
    /**
     * https://redis.io/commands/srandmember
     */
    spop(key: string): Promise<string | null>;
    spop(key: string, count: number): Promise<string[]>;
    /**
     * https://redis.io/commands/srandmember
     */
    srandmember(key: string): Promise<string | null>;
    srandmember(key: string, count: number): Promise<string[]>;
    /**
     * https://redis.io/commands/srem
     */
    srem(key: string, ...members: (string | number)[]): Promise<number>;
    /**
     * https://redis.io/commands/sunion
     */
    sunion(...keys: string[]): Promise<string[]>;
    /**
     * https://redis.io/commands/sunionstore
     */
    sunionstore(destination: string, ...keys: string[]): Promise<number>;
    /**
     * https://redis.io/commands#sorted_set
    */
    /**
     * https://redis.io/commands/zrem
     */
    zrem(key: string, ...members: string[]): Promise<number>;
    /**
     * https://redis.io/commands/zadd
     */
    zadd(key: string, memberscore: Record<string, number>, ...options: string[]): Promise<string | number>;
    /**
     * https://redis.io/commands/zcard
     */
    zcard(key: string): Promise<number>;
    /**
     * https://redis.io/commands/zcount
     */
    zcount(key: string, min: string, max: string): Promise<number>;
    /**
     * https://redis.io/commands/zlexcount
     */
    zlexcount(key: string, min: string, max: string): Promise<number>;
    /**
     * https://redis.io/commands/zincrby
     */
    zincrby(key: string, increment: number, member: string): Promise<string>;
    /**
     * https://redis.io/commands/zpopmax
     */
    zpopmax(key: string): Promise<Record<string, string>>;
    /**
     * https://redis.io/commands/zpopmin
     */
    zpopmin(key: string): Promise<Record<string, string>>;
    /**
     * https://redis.io/commands/zscore
     */
    zscore(key: string, member: string): Promise<string | null>;
    /**
     * https://redis.io/commands/zmscore
     */
    zmscore(key: string, ...member: string[]): Promise<(string | null)[]>;
    /**
     * https://redis.io/commands/zrank
     */
    zrank(key: string, member: string): Promise<number | null>;
    /**
     * https://redis.io/commands/zrange
     */
    zrange(key: string, min: string | number, max: string | number, ...options: (string | number)[]): Promise<string[]>;
    zrangewithscores(key: string, min: string | number, max: string | number, ...options: (string | number)[]): Promise<Record<string, string>>;
    static Array2Object(array: string[]): Record<string, string>;
}
