import { GenericMetadata, RouteMetadata, RouteOptions } from './interface';
import Router = require('find-my-way');
declare class RouteMetadataService {
    declareRouteHandler(target: Function, targetMetadataMap: Map<string | symbol, Map<any, any>>): RouteMetadata[];
}
declare const routeMetadataService: RouteMetadataService;
declare function parseRouteOptions(routePath: string, routeOptions: RouteOptions): GenericMetadata;
/**
 * HTTP/1.1 CONTROLLER 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Controller('/handler')
 * class Controller {
 *   ...
 * }
 * ```
 *
 */
declare function Controller(routePath?: string, routeOptions?: RouteOptions): ClassDecorator;
/**
 * HTTP/1.1 GET METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Get('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Get(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 POST METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Post('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Post(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 PUT METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Put('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Put(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 PATCH METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Patch('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Patch(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 DELETE METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Delete('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Delete(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 HEAD METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Head('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Head(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 OPTIONS METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Options('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Options(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 TRACE METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Trace('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Trace(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * HTTP/1.1 CONNECT METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Connect('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Connect(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * ALL HTTP/1.1 METHODS 装饰器
 *
 * 使用方式:
 * ```typescript
 * @All('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function All(routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * CUSTOM HTTP/1.1 METHOD/METHODS 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Custom('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Custom(method: Router.HTTPMethod | Router.HTTPMethod[], routePath?: string, routeOptions?: RouteOptions): MethodDecorator;
/**
 * 路由 host 装饰器
 *
 * 使用方式:
 * ```typescript
 * @AttachHost('xiaohongshu.com')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function AttachHost(host: string | null): MethodDecorator & ClassDecorator;
/**
 * 路由 version 装饰器
 *
 * 使用方式:
 * ```typescript
 * @AttachVersion('1.2.1')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function AttachVersion(version: string | null): MethodDecorator & ClassDecorator;
/**
 * 路由 store 装饰器
 *
 * 使用方式:
 * ```typescript
 * @AttachStore({ some: 'data' })
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function AttachStore<T extends {} = Record<string, any>>(store: T | null): MethodDecorator & ClassDecorator;
/**
 * 路由 active 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Active(process.env.XHS_ENV === 'prod')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
declare function Active(active?: boolean): MethodDecorator & ClassDecorator;
export { routeMetadataService, parseRouteOptions, Controller, Get, Post, Put, Patch, Delete, Head, Options, Trace, Connect, All, Custom, Active, AttachHost, AttachVersion, AttachStore, };
