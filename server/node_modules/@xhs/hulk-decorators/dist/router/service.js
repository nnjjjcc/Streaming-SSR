"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouterService = void 0;
const utils_1 = require("../utils");
const Router = require("find-my-way");
class RouterService {
    router;
    constructor(config) {
        this.router = Router(config);
    }
    on(method, path, options, handler, afterRespond, store) {
        return this.router
            .on(method, path, options, async function adaptedHandler(ctxReq, ctxRes, params, _, query) {
            const { ctx, next } = this;
            ctx.state = {
                ...ctx.state,
                method: ctx.method,
                path,
                params,
                query,
                store,
                startTime: Date.now(),
                code: 0,
                success: true,
            };
            if (afterRespond) {
                ctxRes
                    .once('close', () => {
                    ctx.state.status = ctx.status;
                    ctx.state.sendTime = Date.now() - ctx.state.endTime;
                    afterRespond(ctx);
                });
            }
            try {
                await handler(ctx, next);
            }
            catch (e) {
                ctx.state.success = false;
                if (e instanceof utils_1.HttpError) {
                    const { status, code } = e;
                    ctx.state.code = code;
                    ctx.status = status;
                    ctx.body = e;
                }
                else {
                    ctx.state.code = -1;
                    ctx.throw(e);
                }
            }
            finally {
                ctx.state.endTime = Date.now();
                ctx.state.responseTime = ctx.state.endTime - ctx.state.startTime;
            }
        });
    }
    lookup(beforeRouting) {
        return (ctx, next) => {
            if (beforeRouting) {
                beforeRouting(ctx);
            }
            return this.router.lookup(ctx.req, ctx.res, { ctx, next });
        };
    }
    prettyPrint() {
        return this.router.prettyPrint({ commonPrefix: false, includeMeta: true });
    }
}
exports.RouterService = RouterService;
