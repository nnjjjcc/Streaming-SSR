"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachStore = exports.AttachVersion = exports.AttachHost = exports.Active = exports.Custom = exports.All = exports.Connect = exports.Trace = exports.Options = exports.Head = exports.Delete = exports.Patch = exports.Put = exports.Post = exports.Get = exports.Controller = exports.parseRouteOptions = exports.routeMetadataService = void 0;
/* eslint-disable import/order */
const crypto_1 = require("crypto");
const di_1 = require("../di");
const enum_1 = require("./enum");
const merge = require("lodash.merge");
const path = require("path");
class RouteMetadataService {
    declareRouteHandler(target, targetMetadataMap) {
        const routeMetadata = [];
        targetMetadataMap
            .forEach((metadataMap, ownProperty) => {
            if (ownProperty !== 'constructor') {
                const controllerMetadata = [];
                const methodMetadata = [];
                const middlewareMetadata = [];
                const classOptionsMetadata = [];
                const propertyOptionsMetadata = [];
                const classStoreMetadata = [];
                const propertyStoreMetadata = [];
                let classActiveMetadata;
                let propertyActiveMetadata;
                metadataMap
                    .forEach((v, k) => {
                    if ((0, di_1.isTypedMetadata)(di_1.MetadataType.CONTROLLER, k)) {
                        controllerMetadata.unshift(v);
                        middlewareMetadata.unshift({ type: 'metadata', value: v });
                        return;
                    }
                    if ((0, di_1.isTypedMetadata)(di_1.MetadataType.METHOD, k)) {
                        methodMetadata.unshift(v);
                        middlewareMetadata.unshift({ type: 'metadata', value: v });
                        return;
                    }
                    if ((0, di_1.isTypedMetadata)(di_1.MetadataType.MIDDLEWARE, k)) {
                        middlewareMetadata.unshift({ type: 'middleware', value: v });
                        return;
                    }
                    if ((0, di_1.isTypedMetadata)(di_1.MetadataType.ROUTE_ACTIVE, k)) {
                        const { value, on } = v;
                        if (on === 'class') {
                            classActiveMetadata = value;
                        }
                        if (on === 'property') {
                            propertyActiveMetadata = value;
                        }
                        return;
                    }
                    if ((0, di_1.isTypedMetadata)(di_1.MetadataType.ROUTE_CONSTRAINT, k)) {
                        const { value, on } = v;
                        if (on === 'class') {
                            classOptionsMetadata.unshift({ constraints: value });
                        }
                        if (on === 'property') {
                            propertyOptionsMetadata.unshift({ constraints: value });
                        }
                        return;
                    }
                    if ((0, di_1.isTypedMetadata)(di_1.MetadataType.ROUTE_STORE, k)) {
                        const { value, on } = v;
                        if (on === 'class') {
                            classStoreMetadata.unshift(value);
                        }
                        if (on === 'property') {
                            propertyStoreMetadata.unshift(value);
                        }
                    }
                });
                if (methodMetadata.length > 0) {
                    methodMetadata
                        .forEach(method => {
                        if (controllerMetadata.length > 0) {
                            controllerMetadata
                                .forEach(controller => {
                                const computedActive = method.active ?? propertyActiveMetadata ?? controller.active ?? classActiveMetadata ?? true;
                                const computedPath = path.join(controller.path, method.path);
                                const computedOptions = merge({}, ...classOptionsMetadata, controller.options, ...propertyOptionsMetadata, method.options);
                                Reflect.ownKeys(computedOptions.constraints)
                                    .forEach(ownKey => {
                                    if (Reflect.get(computedOptions.constraints, ownKey) === null) {
                                        Reflect.deleteProperty(computedOptions.constraints, ownKey);
                                    }
                                });
                                const computedStore = [...classStoreMetadata, controller.store, ...propertyStoreMetadata, method.store]
                                    .reduce((a, c) => (c === null
                                    ? {}
                                    : merge({}, a, c)), {});
                                routeMetadata
                                    .push({
                                    active: computedActive,
                                    method: method.method,
                                    path: computedPath,
                                    options: computedOptions,
                                    store: computedStore,
                                    middlewares: middlewareMetadata
                                        .reduce((a, c) => {
                                        if (c.type === 'middleware') {
                                            if (Array.isArray(c.value)) {
                                                a.push(...c.value);
                                            }
                                            else {
                                                a.push(c.value);
                                            }
                                        }
                                        if (c.type === 'metadata') {
                                            if ((c.value === controller || c.value === method) && c.value.middlewares) {
                                                a.push(...c.value.middlewares);
                                            }
                                        }
                                        return a;
                                    }, []),
                                    handler: ownProperty,
                                    metadataMap,
                                });
                            });
                        }
                        else {
                            const computedActive = method.active ?? propertyActiveMetadata ?? classActiveMetadata ?? true;
                            const computedOptions = merge({}, ...classOptionsMetadata, ...propertyOptionsMetadata, method.options);
                            Reflect.ownKeys(computedOptions.constraints)
                                .forEach(ownKey => {
                                if (Reflect.get(computedOptions.constraints, ownKey) === null) {
                                    Reflect.deleteProperty(computedOptions.constraints, ownKey);
                                }
                            });
                            const computedStore = [...classStoreMetadata, ...propertyStoreMetadata, method.store]
                                .reduce((a, c) => (c === null
                                ? {}
                                : merge({}, a, c)), {});
                            routeMetadata
                                .push({
                                active: computedActive,
                                method: method.method,
                                path: method.path,
                                options: computedOptions,
                                store: computedStore,
                                middlewares: middlewareMetadata
                                    .reduce((a, c) => {
                                    if (c.type === 'middleware') {
                                        if (Array.isArray(c.value)) {
                                            a.push(...c.value);
                                        }
                                        else {
                                            a.push(c.value);
                                        }
                                    }
                                    if (c.type === 'metadata') {
                                        if (c.value === method && c.value.middlewares) {
                                            a.push(...c.value.middlewares);
                                        }
                                    }
                                    return a;
                                }, []),
                                handler: ownProperty,
                                metadataMap,
                            });
                        }
                    });
                }
            }
        });
        return routeMetadata;
    }
}
const routeMetadataService = new RouteMetadataService();
exports.routeMetadataService = routeMetadataService;
function parseRouteOptions(routePath, routeOptions) {
    const { active, middlewares, store = {}, ...rest } = routeOptions;
    return {
        active,
        middlewares,
        path: routePath.startsWith('/')
            ? routePath
            : `/${routePath}`,
        options: {
            constraints: rest,
        },
        store,
    };
}
exports.parseRouteOptions = parseRouteOptions;
/**
 * HTTP/1.1 CONTROLLER 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Controller('/handler')
 * class Controller {
 *   ...
 * }
 * ```
 *
 */
function Controller(routePath = '', routeOptions = {}) {
    const metadata = {
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)((0, crypto_1.randomUUID)(), metadata, di_1.MetadataType.CONTROLLER);
}
exports.Controller = Controller;
/**
 * HTTP/1.1 GET METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Get('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Get(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.GET,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.GET}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Get = Get;
/**
 * HTTP/1.1 POST METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Post('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Post(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.POST,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.POST}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Post = Post;
/**
 * HTTP/1.1 PUT METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Put('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Put(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.PUT,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.PUT}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Put = Put;
/**
 * HTTP/1.1 PATCH METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Patch('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Patch(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.PATCH,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.PATCH}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Patch = Patch;
/**
 * HTTP/1.1 DELETE METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Delete('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Delete(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.DELETE,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.DELETE}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Delete = Delete;
/**
 * HTTP/1.1 HEAD METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Head('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Head(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.HEAD,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.HEAD}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Head = Head;
/**
 * HTTP/1.1 OPTIONS METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Options('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Options(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.OPTIONS,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.OPTIONS}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Options = Options;
/**
 * HTTP/1.1 TRACE METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Trace('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Trace(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.TRACE,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.TRACE}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Trace = Trace;
/**
 * HTTP/1.1 CONNECT METHOD 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Connect('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Connect(routePath = '', routeOptions = {}) {
    const metadata = {
        method: enum_1.MethodMetadataKey.CONNECT,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.CONNECT}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Connect = Connect;
/**
 * ALL HTTP/1.1 METHODS 装饰器
 *
 * 使用方式:
 * ```typescript
 * @All('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function All(routePath = '', routeOptions = {}) {
    const metadata = {
        method: [
            enum_1.MethodMetadataKey.GET,
            enum_1.MethodMetadataKey.POST,
            enum_1.MethodMetadataKey.PUT,
            enum_1.MethodMetadataKey.PATCH,
            enum_1.MethodMetadataKey.DELETE,
            enum_1.MethodMetadataKey.HEAD,
            enum_1.MethodMetadataKey.OPTIONS,
            enum_1.MethodMetadataKey.TRACE,
            enum_1.MethodMetadataKey.CONNECT,
        ],
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.ALL}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.All = All;
/**
 * CUSTOM HTTP/1.1 METHOD/METHODS 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Custom('/handler')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Custom(method, routePath = '', routeOptions = {}) {
    const metadata = {
        method,
        ...parseRouteOptions(routePath, routeOptions),
    };
    return (0, di_1.AttachMetadata)(`${enum_1.MethodMetadataKey.CUSTOM}${(0, crypto_1.randomUUID)()}`, metadata, di_1.MetadataType.METHOD);
}
exports.Custom = Custom;
/**
 * 路由 host 装饰器
 *
 * 使用方式:
 * ```typescript
 * @AttachHost('xiaohongshu.com')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function AttachHost(host) {
    return (0, di_1.AttachMetadata)((0, crypto_1.randomUUID)(), { host }, di_1.MetadataType.ROUTE_CONSTRAINT);
}
exports.AttachHost = AttachHost;
/**
 * 路由 version 装饰器
 *
 * 使用方式:
 * ```typescript
 * @AttachVersion('1.2.1')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function AttachVersion(version) {
    return (0, di_1.AttachMetadata)((0, crypto_1.randomUUID)(), { version }, di_1.MetadataType.ROUTE_CONSTRAINT);
}
exports.AttachVersion = AttachVersion;
/**
 * 路由 store 装饰器
 *
 * 使用方式:
 * ```typescript
 * @AttachStore({ some: 'data' })
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function AttachStore(store) {
    return (0, di_1.AttachMetadata)((0, crypto_1.randomUUID)(), store, di_1.MetadataType.ROUTE_STORE);
}
exports.AttachStore = AttachStore;
/**
 * 路由 active 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Active(process.env.XHS_ENV === 'prod')
 * async method(ctx, next): any {
 *   ...
 * }
 * ```
 *
 */
function Active(active = true) {
    return (0, di_1.AttachMetadata)((0, crypto_1.randomUUID)(), active, di_1.MetadataType.ROUTE_ACTIVE);
}
exports.Active = Active;
