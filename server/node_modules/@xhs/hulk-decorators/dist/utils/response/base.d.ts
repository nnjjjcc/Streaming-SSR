export type DefaultStruct = Record<string, unknown>;
export interface BaseOptions<D, E> {
    code?: number;
    success?: boolean;
    msg?: string;
    data?: D;
    extra?: E;
}
export declare class Base<D = DefaultStruct, E = DefaultStruct> {
    code: number;
    success: boolean;
    msg?: string;
    data?: D;
    extra?: E;
    constructor({ code, success, msg, data, extra, }?: BaseOptions<D, E>);
    setCode(code?: number): this;
    setSuccess(success?: boolean): this;
    setMsg(msg?: string): this;
    setData(data?: D): this;
    appendData(data?: Partial<D>): this;
    setExtra(extra?: E): this;
    appendExtra(extra?: Partial<E>): this;
}
