import { Base, BaseOptions, DefaultStruct } from './base';
export type HttpErrorStatus = 'BadRequest' | 'Unauthorized' | 'PaymentRequired' | 'Forbidden' | 'NotFound' | 'MethodNotAllowed' | 'NotAcceptable' | 'ProxyAuthenticationRequired' | 'RequestTimeout' | 'Conflict' | 'Gone' | 'LengthRequired' | 'PreconditionFailed' | 'PayloadTooLarge' | 'URITooLong' | 'UnsupportedMediaType' | 'RangeNotSatisfiable' | 'ExpectationFailed' | 'ImATeapot' | 'MisdirectedRequest' | 'UnprocessableEntity' | 'Locked' | 'FailedDependency' | 'TooEarly' | 'UpgradeRequired' | 'PreconditionRequired' | 'TooManyRequests' | 'RequestHeaderFieldsTooLarge' | 'UnavailableForLegalReasons' | 'Spam' | 'InternalServerError' | 'NotImplemented' | 'BadGateway' | 'ServiceUnavailable' | 'GatewayTimeout' | 'HTTPVersionNotSupported' | 'VariantAlsoNegotiates' | 'InsufficientStorage' | 'LoopDetected' | 'BandwidthLimitExceeded' | 'NotExtended' | 'NetworkAuthenticationRequired';
export declare class HttpError<D = DefaultStruct, E = DefaultStruct> extends Base<D, E> {
    status: number;
    constructor({ status, code, success, msg, data, extra, }?: {
        status?: number;
    } & BaseOptions<D, E>);
    setStatus(status?: number): this;
    static create(status: HttpErrorStatus, code?: number): HttpError;
    static BadRequest(code?: number): HttpError;
    static Unauthorized(code?: number): HttpError;
    static PaymentRequired(code?: number): HttpError;
    static Forbidden(code?: number): HttpError;
    static NotFound(code?: number): HttpError;
    static MethodNotAllowed(code?: number): HttpError;
    static NotAcceptable(code?: number): HttpError;
    static ProxyAuthenticationRequired(code?: number): HttpError;
    static RequestTimeout(code?: number): HttpError;
    static Conflict(code?: number): HttpError;
    static Gone(code?: number): HttpError;
    static LengthRequired(code?: number): HttpError;
    static PreconditionFailed(code?: number): HttpError;
    static PayloadTooLarge(code?: number): HttpError;
    static URITooLong(code?: number): HttpError;
    static UnsupportedMediaType(code?: number): HttpError;
    static ExpectationFailed(code?: number): HttpError;
    static ImATeapot(code?: number): HttpError;
    static MisdirectedRequest(code?: number): HttpError;
    static UnprocessableEntity(code?: number): HttpError;
    static Locked(code?: number): HttpError;
    static FailedDependency(code?: number): HttpError;
    static TooEarly(code?: number): HttpError;
    static UpgradeRequired(code?: number): HttpError;
    static PreconditionRequired(code?: number): HttpError;
    static TooManyRequests(code?: number): HttpError;
    static RequestHeaderFieldsTooLarge(code?: number): HttpError;
    static UnavailableForLegalReasons(code?: number): HttpError;
    static Spam(code?: number): HttpError;
    static InternalServerError(code?: number): HttpError;
    static NotImplemented(code?: number): HttpError;
    static BadGateway(code?: number): HttpError;
    static ServiceUnavailable(code?: number): HttpError;
    static GatewayTimeout(code?: number): HttpError;
    static HTTPVersionNotSupported(code?: number): HttpError;
    static VariantAlsoNegotiates(code?: number): HttpError;
    static InsufficientStorage(code?: number): HttpError;
    static LoopDetected(code?: number): HttpError;
    static BandwidthLimitExceeded(code?: number): HttpError;
    static NotExtended(code?: number): HttpError;
    static NetworkAuthenticationRequired(code?: number): HttpError;
}
