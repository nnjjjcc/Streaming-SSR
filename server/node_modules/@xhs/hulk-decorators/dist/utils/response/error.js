"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpError = void 0;
const base_1 = require("./base");
const httpErrorMap = new Map([
    ['BadRequest', { msg: 'Bad Request', status: 400 }],
    ['Unauthorized', { msg: 'Unauthorized', status: 401 }],
    ['PaymentRequired', { msg: 'Payment Required', status: 402 }],
    ['Forbidden', { msg: 'Forbidden', status: 403 }],
    ['NotFound', { msg: 'Not Found', status: 404 }],
    ['MethodNotAllowed', { msg: 'Method Not Allowed', status: 405 }],
    ['NotAcceptable', { msg: 'Not Acceptable', status: 406 }],
    ['ProxyAuthenticationRequired', { msg: 'Proxy Authentication Required', status: 407 }],
    ['RequestTimeout', { msg: 'Request Timeout', status: 408 }],
    ['Conflict', { msg: 'Conflict', status: 409 }],
    ['Gone', { msg: 'Gone', status: 410 }],
    ['LengthRequired', { msg: 'Length Required', status: 411 }],
    ['PreconditionFailed', { msg: 'Precondition Failed', status: 412 }],
    ['PayloadTooLarge', { msg: 'Payload Too Large', status: 413 }],
    ['URITooLong', { msg: 'URI Too Long', status: 414 }],
    ['UnsupportedMediaType', { msg: 'Unsupported Media Type', status: 415 }],
    ['RangeNotSatisfiable', { msg: 'Range Not Satisfiable', status: 416 }],
    ['ExpectationFailed', { msg: 'Expectation Failed', status: 417 }],
    ['ImATeapot', { msg: "I'm a Teapot", status: 418 }],
    ['MisdirectedRequest', { msg: 'Misdirected Request', status: 421 }],
    ['UnprocessableEntity', { msg: 'Unprocessable Entity', status: 422 }],
    ['Locked', { msg: 'Locked', status: 423 }],
    ['FailedDependency', { msg: 'Failed Dependency', status: 424 }],
    ['TooEarly', { msg: 'Too Early', status: 425 }],
    ['UpgradeRequired', { msg: 'Upgrade Required', status: 426 }],
    ['PreconditionRequired', { msg: 'Precondition Required', status: 428 }],
    ['TooManyRequests', { msg: 'Too Many Requests', status: 429 }],
    ['RequestHeaderFieldsTooLarge', { msg: 'Request Header Fields Too Large', status: 431 }],
    ['UnavailableForLegalReasons', { msg: 'Unavailable For Legal Reasons', status: 451 }],
    ['Spam', { msg: 'Spam', status: 461 }],
    ['InternalServerError', { msg: 'Internal Server Error', status: 500 }],
    ['NotImplemented', { msg: 'Not Implemented', status: 501 }],
    ['BadGateway', { msg: 'Bad Gateway', status: 502 }],
    ['ServiceUnavailable', { msg: 'Service Unavailable', status: 503 }],
    ['GatewayTimeout', { msg: 'Gateway Timeout', status: 504 }],
    ['HTTPVersionNotSupported', { msg: 'HTTP Version Not Supported', status: 505 }],
    ['VariantAlsoNegotiates', { msg: 'Variant Also Negotiates', status: 506 }],
    ['InsufficientStorage', { msg: 'Insufficient Storage', status: 507 }],
    ['LoopDetected', { msg: 'Loop Detected', status: 508 }],
    ['BandwidthLimitExceeded', { msg: 'Bandwidth Limit Exceeded', status: 509 }],
    ['NotExtended', { msg: 'Not Extended', status: 510 }],
    ['NetworkAuthenticationRequired', { msg: 'Network Authentication Required', status: 511 }],
]);
class HttpError extends base_1.Base {
    status;
    constructor({ status = 500, code = -1, success = false, msg = 'Internal Server Error', data, extra, } = {}) {
        super({
            code, success, msg, data, extra,
        });
        this.status = status;
    }
    setStatus(status) {
        if (status !== undefined) {
            this.status = status;
        }
        return this;
    }
    static create(status, code = -1) {
        return new HttpError(httpErrorMap.get(status))
            .setCode(code);
    }
    static BadRequest(code = -1) {
        return HttpError.create('BadRequest', code);
    }
    static Unauthorized(code = -1) {
        return HttpError.create('Unauthorized', code);
    }
    static PaymentRequired(code = -1) {
        return HttpError.create('PaymentRequired', code);
    }
    static Forbidden(code = -1) {
        return HttpError.create('Forbidden', code);
    }
    static NotFound(code = -1) {
        return HttpError.create('NotFound', code);
    }
    static MethodNotAllowed(code = -1) {
        return HttpError.create('MethodNotAllowed', code);
    }
    static NotAcceptable(code = -1) {
        return HttpError.create('NotAcceptable', code);
    }
    static ProxyAuthenticationRequired(code = -1) {
        return HttpError.create('ProxyAuthenticationRequired', code);
    }
    static RequestTimeout(code = -1) {
        return HttpError.create('RequestTimeout', code);
    }
    static Conflict(code = -1) {
        return HttpError.create('Conflict', code);
    }
    static Gone(code = -1) {
        return HttpError.create('Gone', code);
    }
    static LengthRequired(code = -1) {
        return HttpError.create('LengthRequired', code);
    }
    static PreconditionFailed(code = -1) {
        return HttpError.create('PreconditionFailed', code);
    }
    static PayloadTooLarge(code = -1) {
        return HttpError.create('PayloadTooLarge', code);
    }
    static URITooLong(code = -1) {
        return HttpError.create('URITooLong', code);
    }
    static UnsupportedMediaType(code = -1) {
        return HttpError.create('UnsupportedMediaType', code);
    }
    static ExpectationFailed(code = -1) {
        return HttpError.create('ExpectationFailed', code);
    }
    static ImATeapot(code = -1) {
        return HttpError.create('ImATeapot', code);
    }
    static MisdirectedRequest(code = -1) {
        return HttpError.create('MisdirectedRequest', code);
    }
    static UnprocessableEntity(code = -1) {
        return HttpError.create('UnprocessableEntity', code);
    }
    static Locked(code = -1) {
        return HttpError.create('Locked', code);
    }
    static FailedDependency(code = -1) {
        return HttpError.create('FailedDependency', code);
    }
    static TooEarly(code = -1) {
        return HttpError.create('TooEarly', code);
    }
    static UpgradeRequired(code = -1) {
        return HttpError.create('UpgradeRequired', code);
    }
    static PreconditionRequired(code = -1) {
        return HttpError.create('PreconditionRequired', code);
    }
    static TooManyRequests(code = -1) {
        return HttpError.create('TooManyRequests', code);
    }
    static RequestHeaderFieldsTooLarge(code = -1) {
        return HttpError.create('RequestHeaderFieldsTooLarge', code);
    }
    static UnavailableForLegalReasons(code = -1) {
        return HttpError.create('UnavailableForLegalReasons', code);
    }
    static Spam(code = -1) {
        return HttpError.create('Spam', code);
    }
    static InternalServerError(code = -1) {
        return HttpError.create('InternalServerError', code);
    }
    static NotImplemented(code = -1) {
        return HttpError.create('NotImplemented', code);
    }
    static BadGateway(code = -1) {
        return HttpError.create('BadGateway', code);
    }
    static ServiceUnavailable(code = -1) {
        return HttpError.create('ServiceUnavailable', code);
    }
    static GatewayTimeout(code = -1) {
        return HttpError.create('GatewayTimeout', code);
    }
    static HTTPVersionNotSupported(code = -1) {
        return HttpError.create('HTTPVersionNotSupported', code);
    }
    static VariantAlsoNegotiates(code = -1) {
        return HttpError.create('VariantAlsoNegotiates', code);
    }
    static InsufficientStorage(code = -1) {
        return HttpError.create('InsufficientStorage', code);
    }
    static LoopDetected(code = -1) {
        return HttpError.create('LoopDetected', code);
    }
    static BandwidthLimitExceeded(code = -1) {
        return HttpError.create('BandwidthLimitExceeded', code);
    }
    static NotExtended(code = -1) {
        return HttpError.create('NotExtended', code);
    }
    static NetworkAuthenticationRequired(code = -1) {
        return HttpError.create('NetworkAuthenticationRequired', code);
    }
}
exports.HttpError = HttpError;
