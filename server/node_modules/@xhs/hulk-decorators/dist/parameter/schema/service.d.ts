import 'reflect-metadata';
import s, { S as GenericSchema, ObjectSchema, JSONSchema } from 'fluent-json-schema';
import { ErrorObject, ValidateFunction } from 'ajv';
import { ValidationResult } from './interface';
declare class SchemaService {
    private isObjectSchema;
    private refIndex;
    private refClassMap;
    private refClassKeyword;
    private ajv;
    private recursivelyGatherRefClasses;
    private recursivelyGatherDefinitions;
    refClass<T extends Function>(target: T): ObjectSchema;
    organizeSchema<T extends Function>(target: T): ObjectSchema;
}
declare const schemaService: SchemaService;
/**
 * **fluent-api S:**
 * - 快速上手: https://www.fastify.io/docs/latest/Fluent-Schema/
 * - 原始项目: https://github.com/fastify/fluent-json-schema
 * - 快速理解 json schema: https://json-schema.org/understanding-json-schema/index.html
 *
 * **额外api:**
 * - `refClass`: 在json schema中，当需要依赖现有schema时需要通过definition + ref的方式实现，整体代码较为繁琐，所以新增了refClass的api，只需要 **refClass(ReferredClass)** 即可直接继承校验规则
 *
 * 使用方式:
 * ```typescript
 * class User {
 *   @Schema(S.number().required())// number and required
 *   property0: number
 *
 *   @Schema(S.anyOf([S.number(), S.boolean()]))// number or boolean, not required
 *   property1?: number | boolean
 * }
 *
 * @Schema(S.title('title for UserGroup'))// comments
 * class UserGroup {
 *   @Schema(S.array().items(S.refClass(User)).required())
 *   users: User[]
 * }
 *
 * @Hulk()
 * @provide()
 * @controller('/user')
 * export default class UserController {
 *   @post('/group_add')
 *   async groupAdd(
 *     ctx,
 *     @Body() body: UserGroup,// body会接受UserGroup上定义的json schema校验
 *     next,
 *   ): IResult<any> {
 *     ...
 *   }
 * }
 * ```
 *
 */
declare const S: typeof s & {
    refClass: typeof schemaService.refClass;
};
/**
 * 属性装饰器，用来通过 **fluent-api S** 设置属性的json schema，最终聚合成参数的json schema:
 * - fluent-api **{@linkcode S}**
 *
 * 使用方式:
 * ```typescript
 * class User {
 *   @Schema(S.number().required())// number and required
 *   property0: number
 *
 *   @Schema(S.anyOf([S.number(), S.boolean()]))// number or boolean, not required
 *   property1?: number | boolean
 * }
 *
 * @Schema(S.title('title for UserGroup'))// comments
 * class UserGroup {
 *   @Schema(S.array().items(S.refClass(User)).required())
 *   users: User[]
 * }
 *
 * @Hulk()
 * @provide()
 * @controller('/user')
 * export default class UserController {
 *   @post('/group_add')
 *   async groupAdd(
 *     ctx,
 *     @Body() body: UserGroup,// body会接受UserGroup上定义的json schema校验
 *     next,
 *   ): IResult<any> {
 *     ...
 *   }
 * }
 * ```
 *
 */
declare function Schema(schema: GenericSchema | ObjectSchema): ClassDecorator & PropertyDecorator;
declare function Schema(schema: JSONSchema): PropertyDecorator;
/**
 * 获取指定class上定义的json schema
 *
 * 使用方式:
 * ```typescript
 * class User {
 *   @Schema(S.number().required())// number and required
 *   property0: number
 *
 *   @Schema(S.anyOf([S.number(), S.boolean()]))// number or boolean, not required
 *   property1?: number | boolean
 * }
 *
 * @Schema(S.title('title for UserGroup'))// comments
 * class UserGroup {
 *   @Schema(S.array().items(S.refClass(User)).required())
 *   users: User[]
 * }
 *
 * reflectSchema(UserGroup)
 *
 * // {
 * //   $schema: 'http://json-schema.org/draft-07/schema#',
 * //   definitions:
 * //   {
 * //     '0': {
 * //       type: 'object',
 * //       properties: {
 * //         property0: {
 * //           type: 'number',
 * //         },
 * //         property1: {
 * //           anyOf: [
 * //             { type: 'number' },
 * //             { type: 'boolean' },
 * //           ],
 * //         },
 * //       },
 * //       required: ['property0'],
 * //     },
 * //   },
 * //   type: 'object',
 * //   title: 'title for UserGroup',
 * //   properties: {
 * //     users: {
 * //       type: 'array',
 * //       items: {
 * //         type: 'object',
 * //         $ref: '#/definitions/0',
 * //       },
 * //     },
 * //   },
 * //   required: ['users'],
 * // }
 * ```
 *
 */
declare function reflectSchema<T extends Function>(target: T): object;
/** @ignore */
declare function organizeValidateHandler<T extends Function>(target: T): ValidateFunction<T>;
/**
 * 传入定义过schema的class和json手动校验
 *
 * 使用方式:
 * ```typescript
 * class C {
 *   @Schema(S.string().required())
 *   string: string
 * }
 *
 * class B {
 *   @Schema(S.string())
 *   string?: string
 *
 *   @Schema(S.refClass(C))
 *   refC?: C
 * }
 *
 * class A {
 *   // 一个最大长度为3，元素为整数的数组，默认[0]
 *   @Schema(S.array().maxItems(3).items(S.integer()).default([0]))
 *   array?: number[] = [0]
 *
 *   @Schema(S.allOf([S.refClass(A), S.refClass(B)]))
 *   allOfAandB?: A & B
 *
 *   @Schema(S.anyOf([S.refClass(A), S.refClass(B), S.refClass(C)]))
 *   anyOfAorB?: A | B | C
 * }
 *
 * const a = { allOfAandB: { refC: { } } }
 *
 * validate(A, a)
 *
 * // {
 * //   valid: false,
 * //   errors: [
 * //     {
 * //       keyword: 'required',
 * //       dataPath: '/allOfAandB/refC',
 * //       schemaPath: '#/definitions/0/required',
 * //       params: { missingProperty: 'string' },
 * //       message: "should have required property 'string'",
 * //     },
 * //   ],
 * // }
 *
 * const b = { allOfAandB: { refC: { string: 'string' } } }
 *
 * validate(A, b)
 *
 * // {
 * //   valid: true,
 * //   errors: null,
 * // }
 * //
 * // 若定义了default，参数对应的成员若未传值则会被写入default的值
 * // b => {
 * //   allOfAandB: { refC: { string: 'string' }, array: [0] },
 * //   array: [0],
 * // }
 * ```
 *
 */
declare function validate<T extends Function>(target: T, subTarget: any): ValidationResult<ErrorObject>;
/**
 * 属性装饰器，用来进行入参转换
 *
 * 使用方式:
 * ```typescript
 * class QueryDto {
 *   @Transform(v => Number(v))
 *   stringnumber: number
 *   ...
 * }
 * ```
 *
 */
declare function Transform(transform: (v: any) => any): PropertyDecorator;
/** @ignore */
declare function organizeTransformHandler<T extends Function>(target: T): [string | symbol, Function][];
export { ErrorObject, S, Schema, reflectSchema, organizeValidateHandler, validate, Transform, organizeTransformHandler, };
