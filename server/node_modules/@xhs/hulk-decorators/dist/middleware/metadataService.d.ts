import { MiddlewareMetadata } from './interface';
import Koa = require('koa');
declare class MiddlewareMetadataService {
    declareMiddlewareHandler(target: Function, targetMetadataMap: Map<string | symbol, Map<any, any>>, middlewareMap: Map<Function | object, MiddlewareMetadata | undefined>): MiddlewareMetadata | undefined;
}
declare const middlewareMetadataService: MiddlewareMetadataService;
/**
 * Middleware 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Middleware()
 * class SomeMiddleware {
 *   use(ctx, next): any {
 *     ...
 *   }
 * }
 * ```
 *
 */
declare function Middleware(options?: {
    keyword?: string;
}): ClassDecorator;
/**
 * 为Hulk装饰器装饰的类或类中的元素添加中间件元数据的方法（Reflect.defineMetadata的封装，添加了对Hulk特殊类型元数据的额外处理）
 *
 * 使用方式:
 * ```typescript
 * AttachMiddleware(
 *   value,
 * )
 *
 * or
 *
 * AttachMiddleware(
 *   key,
 *   value,
 * )
 * ```
 *
 */
export declare function AttachMiddleware(metadataKey: string, metadataValue: Koa.Middleware | Function | (Koa.Middleware | Function)[]): ClassDecorator & MethodDecorator;
export declare function AttachMiddleware(metadataValue: Koa.Middleware | Function | (Koa.Middleware | Function)[]): ClassDecorator & MethodDecorator;
export { middlewareMetadataService, Middleware, };
