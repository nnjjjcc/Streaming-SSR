"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Middleware = exports.middlewareMetadataService = exports.AttachMiddleware = void 0;
/* eslint-disable import/order */
const crypto_1 = require("crypto");
const di_1 = require("../di");
const enum_1 = require("./enum");
const utils_1 = require("../utils");
class MiddlewareMetadataService {
    declareMiddlewareHandler(target, targetMetadataMap, middlewareMap) {
        let keyword = enum_1.MiddlewareKeyword.USE;
        const aggregated = [target];
        let middlewareMetadata;
        const metadataMap = targetMetadataMap.get('constructor');
        if (metadataMap) {
            for (const [k, v] of metadataMap) {
                if ((0, di_1.isTypedMetadata)(di_1.MetadataType.STATEFUL_MIDDLEWARE, k)) {
                    keyword = v.keyword;
                    middlewareMetadata = {
                        keyword,
                        aggregated,
                        metadataMap: targetMetadataMap.get(keyword) || new Map(),
                    };
                    break;
                }
            }
            if (middlewareMetadata) {
                targetMetadataMap
                    .get(keyword)
                    ?.forEach((v, k) => {
                    if ((0, di_1.isTypedMetadata)(di_1.MetadataType.MIDDLEWARE, k)) {
                        aggregated
                            .unshift(...(Array.isArray(v) ? v : [v])
                            .reduce((a, c) => {
                            if ((0, utils_1.isOtherThanClass)(c)) {
                                a.push(c);
                            }
                            else {
                                const metadata = middlewareMap.get(c);
                                if (metadata !== undefined) {
                                    a.push(...metadata.aggregated);
                                }
                            }
                            return a;
                        }, []));
                    }
                });
            }
        }
        return middlewareMetadata;
    }
}
const middlewareMetadataService = new MiddlewareMetadataService();
exports.middlewareMetadataService = middlewareMetadataService;
/**
 * Middleware 装饰器
 *
 * 使用方式:
 * ```typescript
 * @Middleware()
 * class SomeMiddleware {
 *   use(ctx, next): any {
 *     ...
 *   }
 * }
 * ```
 *
 */
function Middleware(options) {
    return (0, di_1.AttachMetadata)((0, crypto_1.randomUUID)(), {
        keyword: enum_1.MiddlewareKeyword.USE,
        ...options,
    }, di_1.MetadataType.STATEFUL_MIDDLEWARE);
}
exports.Middleware = Middleware;
function AttachMiddleware(...args) {
    const [first, last] = args;
    return typeof (first) === 'string'
        ? (0, di_1.AttachMetadata)(first, last, di_1.MetadataType.MIDDLEWARE)
        : (0, di_1.AttachMetadata)((0, crypto_1.randomUUID)(), first, di_1.MetadataType.MIDDLEWARE);
}
exports.AttachMiddleware = AttachMiddleware;
