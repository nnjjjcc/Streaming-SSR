"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetMetadata = void 0;
/* eslint-disable no-prototype-builtins */
require("reflect-metadata");
function isMethodPropertyDescriptor(descriptor) {
    return descriptor !== undefined && descriptor?.hasOwnProperty('value');
}
/**
 * @ignore
 * Decorator that assigns metadata to the class/function using the specified `key`.
 *
 * Requires two parameters:
 * - `metadataKey` - a value defining the key under which the metadata is stored
 * - `metadataValue` - metadata to be associated with `metadataKey`
 *
 * This metadata can be reflected using `Reflect.getOwnMetadata`.
 *
 * Example: `@SetMetadata('roles', ['admin'])`
 *
 */
function SetMetadata(metadataKey, metadataValue) {
    function decoratorFactory(target, propertyKey, descriptor) {
        if (propertyKey !== undefined) {
            // method
            if (isMethodPropertyDescriptor(descriptor)) {
                if (descriptor.value) {
                    Reflect.defineMetadata(metadataKey, metadataValue, descriptor.value);
                }
                return descriptor;
            }
            // parameter
            if (typeof (descriptor) === 'number') {
                const parameterMetadataValues = Reflect.getOwnMetadata(metadataKey, target, propertyKey) || [];
                parameterMetadataValues[descriptor] = metadataValue;
                Reflect.defineMetadata(metadataKey, parameterMetadataValues, target, propertyKey);
                return descriptor;
            }
            // property
            Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);
            return descriptor;
        }
        // class
        Reflect.defineMetadata(metadataKey, metadataValue, target);
        return target;
    }
    return decoratorFactory;
}
exports.SetMetadata = SetMetadata;
