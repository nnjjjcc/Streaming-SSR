import { HulkContext, HulkState } from '@xhs/hulk-decorators';
import { ArtifactLabel, SourceLabel, GenericLabel, UpstreamingLabel, Observer, RenderState, UpstreamingState, ConnectionState, DiscoverState, CustomMetricsState } from './interface';
export declare class MetricsService {
    static ArtifactlabelNames: ArtifactLabel[];
    static labelNames: (ArtifactLabel | SourceLabel | GenericLabel)[];
    static upstreamingLabelNames: (ArtifactLabel | SourceLabel | UpstreamingLabel)[];
    static apiCallsObserver: Observer<GenericLabel | "routerPath"> | undefined;
    static apiCallsSendTimeObserver: Observer<GenericLabel | "routerPath"> | undefined;
    static apiCallsSizeObserver: Observer<GenericLabel | "routerPath"> | undefined;
    static apiCallsRenderObserver: Observer<GenericLabel | "routerPath"> | undefined;
    static apiCallsRenderTimeObserver: Observer<GenericLabel | "routerPath"> | undefined;
    static apiCallsRenderErrorObserver: Observer<GenericLabel | "routerPath"> | undefined;
    static httpCallsObserver: Observer<UpstreamingLabel | "routerPath"> | undefined;
    static rpcCallsObserver: Observer<UpstreamingLabel | "routerPath"> | undefined;
    static dbCallsObserver: Observer<UpstreamingLabel | "routerPath"> | undefined;
    static connectionObserver: Observer<"upstream"> | undefined;
    static discoverObserver: Observer<"upstream"> | undefined;
    static customMetrics: Map<string, Observer<string>>;
    static register<T extends string>({ name, help, labelNames }: {
        name: string;
        help?: string;
        labelNames: T[];
    }): typeof MetricsService;
    static observeRenderState(state: RenderState, source?: Partial<Record<SourceLabel, string | number>>): void;
    static observeUpstreamingState(observer: Observer<SourceLabel | UpstreamingLabel> | undefined, state: UpstreamingState, source?: Partial<Record<SourceLabel, string | number>>): void;
    static observeHttpState(state: UpstreamingState, source?: Partial<Record<SourceLabel, string | number>>): void;
    static observeRpcState(state: UpstreamingState, source?: Partial<Record<SourceLabel, string | number>>): void;
    static observeDbState(state: UpstreamingState, source?: Partial<Record<SourceLabel, string | number>>): void;
    static observeConnectionState({ count, ...labels }: ConnectionState): void;
    static observeDiscoverState({ discoverTime, ...labels }: DiscoverState): void;
    static observeCustomState({ name, labels, value }: CustomMetricsState): void;
    static observe(ctx: HulkContext<HulkState & Omit<RenderState, 'detached'> & Partial<Record<'http' | 'rpc' | 'db', UpstreamingState[]>> & {
        customMetrics?: CustomMetricsState[];
    }>): void;
}
