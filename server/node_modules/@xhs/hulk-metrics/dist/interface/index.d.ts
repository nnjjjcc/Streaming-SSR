import { Summary } from 'prom-client';
export type ArtifactLabel = 'artifactName' | 'artifactVersion' | 'envTag';
export type SourceLabel = 'routerPath';
export type GenericLabel = 'type' | 'method' | 'path' | 'status' | 'code' | 'success' | 'downgrade' | 'detached';
export type UpstreamingLabel = 'upstream' | 'host' | GenericLabel;
export type ConnectionLabel = 'upstream';
export type DiscoverLabel = 'upstream';
export type LooseObserve<T extends string> = (labels: Partial<Record<ArtifactLabel | T, string | number>>, value: number) => void;
export type StrictObserve<T extends string> = (labels: Record<T, string | number> & Partial<Record<ArtifactLabel, string | number>>, value: number) => void;
export type Observer<T extends string> = Summary<ArtifactLabel | T> & {
    looseObserve: LooseObserve<T>;
    strictObserve: StrictObserve<T>;
};
export interface GenericState {
    path?: string;
    method?: string;
    status?: number;
    code?: string | number;
    success?: boolean;
}
export interface DowngradeState {
    downgrade?: string;
}
export interface DetachedState {
    detached?: boolean;
}
export type RenderState = DowngradeState & DetachedState & {
    renderType?: string;
    renderRoute?: string;
    renderSuccess?: boolean;
    renderStartTime?: number;
    renderEndTime?: number;
    renderTime?: number;
    renderSize?: number;
};
export type UpstreamingState = GenericState & DowngradeState & DetachedState & {
    upstream?: string;
    host?: string;
    startTime?: number;
    endTime?: number;
    responseTime?: number;
    detached?: boolean;
};
export interface ConnectionState {
    upstream?: string;
    count?: number;
}
export interface DiscoverState {
    upstream?: string;
    discoverTime?: number;
}
export interface CustomMetricsState {
    name: string;
    labels: Record<string, string | number>;
    value?: number;
}
